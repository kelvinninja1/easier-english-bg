!function(e) {
    function t(t, n, o) {
        if ("object" != typeof t && (t = {}), o) {
            if ("boolean" != typeof t.isMenu) {
                var s = o.children();
                t.isMenu = 1 == s.length && s.is(n.panelNodetype);
            }
            return t;
        }
        if ("object" != typeof t.onClick && (t.onClick = {}), "undefined" != typeof t.onClick.setLocationHref && (e[a].deprecated("onClick.setLocationHref option", "!onClick.preventDefault"), 
        "boolean" == typeof t.onClick.setLocationHref && (t.onClick.preventDefault = !t.onClick.setLocationHref)), 
        t = e.extend(!0, {}, e[a].defaults, t), e[a].useOverflowScrollingFallback()) {
            switch (t.position) {
              case "top":
              case "right":
              case "bottom":
                e[a].debug('position: "' + t.position + '" not supported when using the overflowScrolling-fallback.'), 
                t.position = "left";
            }
            switch (t.zposition) {
              case "front":
              case "next":
                e[a].debug('z-position: "' + t.zposition + '" not supported when using the overflowScrolling-fallback.'), 
                t.zposition = "back";
            }
        }
        return t;
    }
    function n(t) {
        return "object" != typeof t && (t = {}), "undefined" != typeof t.panelNodeType && (e[a].deprecated("panelNodeType configuration option", "panelNodetype"), 
        t.panelNodetype = t.panelNodeType), t = e.extend(!0, {}, e[a].configuration, t), 
        "string" != typeof t.pageSelector && (t.pageSelector = "> " + t.pageNodetype), t;
    }
    function o() {
        d.$wndw = e(window), d.$html = e("html"), d.$body = e("body"), d.$allMenus = e(), 
        e.each([ c, u, p ], function(e, t) {
            t.add = function(e) {
                e = e.split(" ");
                for (var n in e) t[e[n]] = t.mm(e[n]);
            };
        }), c.mm = function(e) {
            return "mm-" + e;
        }, c.add("menu ismenu panel list subtitle selected label spacer current highest hidden page blocker modal background opened opening subopened subopen fullsubopen subclose nooverflowscrolling"), 
        c.umm = function(e) {
            return "mm-" == e.slice(0, 3) && (e = e.slice(3)), e;
        }, u.mm = function(e) {
            return "mm-" + e;
        }, u.add("parent style scrollTop offetLeft"), p.mm = function(e) {
            return e + ".mm";
        }, p.add("toggle open opening opened close closing closed update setPage setSelected transitionend touchstart touchend mousedown mouseup click keydown keyup resize"), 
        e[a]._c = c, e[a]._d = u, e[a]._e = p, e[a].glbl = d, e[a].useOverflowScrollingFallback(h);
    }
    function s(t, n) {
        if (t.hasClass(c.current)) return !1;
        var o = e("." + c.panel, n), s = o.filter("." + c.current);
        return o.removeClass(c.highest).removeClass(c.current).not(t).not(s).addClass(c.hidden), 
        t.hasClass(c.opened) ? s.addClass(c.highest).removeClass(c.opened).removeClass(c.subopened) : (t.addClass(c.highest), 
        s.addClass(c.subopened)), t.removeClass(c.hidden).removeClass(c.subopened).addClass(c.current).addClass(c.opened), 
        "open";
    }
    function i() {
        return d.$scrollTopNode || (0 != d.$html.scrollTop() ? d.$scrollTopNode = d.$html : 0 != d.$body.scrollTop() && (d.$scrollTopNode = d.$body)), 
        d.$scrollTopNode ? d.$scrollTopNode.scrollTop() : 0;
    }
    function l(t, n, o) {
        var s = e[a].support.transition;
        "webkitTransition" == s ? t.one("webkitTransitionEnd", n) : s ? t.one(p.transitionend, n) : setTimeout(n, o);
    }
    var a = "mmenu", r = "4.1.7";
    if (!e[a]) {
        var d = {
            $wndw: null,
            $html: null,
            $body: null,
            $page: null,
            $blck: null,
            $allMenus: null,
            $scrollTopNode: null
        }, c = {}, p = {}, u = {}, f = 0;
        e[a] = function(e, t, n) {
            return d.$allMenus = d.$allMenus.add(e), this.$menu = e, this.opts = t, this.conf = n, 
            this.serialnr = f++, this._init(), this;
        }, e[a].prototype = {
            open: function() {
                return this._openSetup(), this._openFinish(), "open";
            },
            _openSetup: function() {
                var e = i();
                this.$menu.addClass(c.current), d.$allMenus.not(this.$menu).trigger(p.close), d.$page.data(u.style, d.$page.attr("style") || "").data(u.scrollTop, e).data(u.offetLeft, d.$page.offset().left);
                var t = 0;
                d.$wndw.off(p.resize).on(p.resize, function(e, n) {
                    if (n || d.$html.hasClass(c.opened)) {
                        var o = d.$wndw.width();
                        o != t && (t = o, d.$page.width(o - d.$page.data(u.offetLeft)));
                    }
                }).trigger(p.resize, [ !0 ]), this.conf.preventTabbing && d.$wndw.off(p.keydown).on(p.keydown, function(e) {
                    return 9 == e.keyCode ? (e.preventDefault(), !1) : void 0;
                }), this.opts.modal && d.$html.addClass(c.modal), this.opts.moveBackground && d.$html.addClass(c.background), 
                "left" != this.opts.position && d.$html.addClass(c.mm(this.opts.position)), "back" != this.opts.zposition && d.$html.addClass(c.mm(this.opts.zposition)), 
                this.opts.classes && d.$html.addClass(this.opts.classes), d.$html.addClass(c.opened), 
                this.$menu.addClass(c.opened), d.$page.scrollTop(e), this.$menu.scrollTop(0);
            },
            _openFinish: function() {
                var e = this;
                l(d.$page, function() {
                    e.$menu.trigger(p.opened);
                }, this.conf.transitionDuration), d.$html.addClass(c.opening), this.$menu.trigger(p.opening), 
                window.scrollTo(0, 1);
            },
            close: function() {
                var e = this;
                return l(d.$page, function() {
                    e.$menu.removeClass(c.current).removeClass(c.opened), d.$html.removeClass(c.opened).removeClass(c.modal).removeClass(c.background).removeClass(c.mm(e.opts.position)).removeClass(c.mm(e.opts.zposition)), 
                    e.opts.classes && d.$html.removeClass(e.opts.classes), d.$wndw.off(p.resize).off(p.keydown), 
                    d.$page.attr("style", d.$page.data(u.style)), d.$scrollTopNode && d.$scrollTopNode.scrollTop(d.$page.data(u.scrollTop)), 
                    e.$menu.trigger(p.closed);
                }, this.conf.transitionDuration), d.$html.removeClass(c.opening), this.$menu.trigger(p.closing), 
                "close";
            },
            _init: function() {
                if (this.opts = t(this.opts, this.conf, this.$menu), this.direction = this.opts.slidingSubmenus ? "horizontal" : "vertical", 
                this._initPage(d.$page), this._initMenu(), this._initBlocker(), this._initPanles(), 
                this._initLinks(), this._initOpenClose(), this._bindCustomEvents(), e[a].addons) for (var n = 0; n < e[a].addons.length; n++) "function" == typeof this["_addon_" + e[a].addons[n]] && this["_addon_" + e[a].addons[n]]();
            },
            _bindCustomEvents: function() {
                var t = this;
                this.$menu.off(p.open + " " + p.close + " " + p.setPage + " " + p.update).on(p.open + " " + p.close + " " + p.setPage + " " + p.update, function(e) {
                    e.stopPropagation();
                }), this.$menu.on(p.open, function(n) {
                    return e(this).hasClass(c.current) ? (n.stopImmediatePropagation(), !1) : t.open();
                }).on(p.close, function(n) {
                    return e(this).hasClass(c.current) ? t.close() : (n.stopImmediatePropagation(), 
                    !1);
                }).on(p.setPage, function(e, n) {
                    t._initPage(n), t._initOpenClose();
                });
                var n = this.$menu.find(this.opts.isMenu && "horizontal" != this.direction ? "ul, ol" : "." + c.panel);
                n.off(p.toggle + " " + p.open + " " + p.close).on(p.toggle + " " + p.open + " " + p.close, function(e) {
                    e.stopPropagation();
                }), "horizontal" == this.direction ? n.on(p.open, function() {
                    return s(e(this), t.$menu);
                }) : n.on(p.toggle, function() {
                    var t = e(this);
                    return t.triggerHandler(t.parent().hasClass(c.opened) ? p.close : p.open);
                }).on(p.open, function() {
                    return e(this).parent().addClass(c.opened), "open";
                }).on(p.close, function() {
                    return e(this).parent().removeClass(c.opened), "close";
                });
            },
            _initBlocker: function() {
                var t = this;
                d.$blck || (d.$blck = e('<div id="' + c.blocker + '" />').css("opacity", 0).appendTo(d.$body)), 
                d.$blck.off(p.touchstart).on(p.touchstart, function(e) {
                    e.preventDefault(), e.stopPropagation(), d.$blck.trigger(p.mousedown);
                }).on(p.mousedown, function(e) {
                    e.preventDefault(), d.$html.hasClass(c.modal) || t.$menu.trigger(p.close);
                });
            },
            _initPage: function(t) {
                t || (t = e(this.conf.pageSelector, d.$body), t.length > 1 && (e[a].debug("Multiple nodes found for the page-node, all nodes are wrapped in one <" + this.conf.pageNodetype + ">."), 
                t = t.wrapAll("<" + this.conf.pageNodetype + " />").parent())), t.addClass(c.page), 
                d.$page = t;
            },
            _initMenu: function() {
                this.conf.clone && (this.$menu = this.$menu.clone(!0), this.$menu.add(this.$menu.find("*")).filter("[id]").each(function() {
                    e(this).attr("id", c.mm(e(this).attr("id")));
                })), this.$menu.contents().each(function() {
                    3 == e(this)[0].nodeType && e(this).remove();
                }), this.$menu.prependTo("body").addClass(c.menu), this.$menu.addClass(c.mm(this.direction)), 
                this.opts.classes && this.$menu.addClass(this.opts.classes), this.opts.isMenu && this.$menu.addClass(c.ismenu), 
                "left" != this.opts.position && this.$menu.addClass(c.mm(this.opts.position)), "back" != this.opts.zposition && this.$menu.addClass(c.mm(this.opts.zposition));
            },
            _initPanles: function() {
                var t = this;
                this.__refactorClass(e("." + this.conf.listClass, this.$menu), "list"), this.opts.isMenu && e("ul, ol", this.$menu).not(".mm-nolist").addClass(c.list);
                var n = e("." + c.list + " > li", this.$menu);
                this.__refactorClass(n.filter("." + this.conf.selectedClass), "selected"), this.__refactorClass(n.filter("." + this.conf.labelClass), "label"), 
                this.__refactorClass(n.filter("." + this.conf.spacerClass), "spacer"), n.off(p.setSelected).on(p.setSelected, function(t, o) {
                    t.stopPropagation(), n.removeClass(c.selected), "boolean" != typeof o && (o = !0), 
                    o && e(this).addClass(c.selected);
                }), this.__refactorClass(e("." + this.conf.panelClass, this.$menu), "panel"), this.$menu.children().filter(this.conf.panelNodetype).add(this.$menu.find("." + c.list).children().children().filter(this.conf.panelNodetype)).addClass(c.panel);
                var o = e("." + c.panel, this.$menu);
                o.each(function(n) {
                    var o = e(this), s = o.attr("id") || c.mm("m" + t.serialnr + "-p" + n);
                    o.attr("id", s);
                }), o.find("." + c.panel).each(function() {
                    var n = e(this), o = n.is("ul, ol") ? n : n.find("ul ,ol").first(), s = n.parent(), i = s.find("> a, > span"), l = s.closest("." + c.panel);
                    if (n.data(u.parent, s), s.parent().is("." + c.list)) {
                        var a = e('<a class="' + c.subopen + '" href="#' + n.attr("id") + '" />').insertBefore(i);
                        i.is("a") || a.addClass(c.fullsubopen), "horizontal" == t.direction && o.prepend('<li class="' + c.subtitle + '"><a class="' + c.subclose + '" href="#' + l.attr("id") + '">' + i.text() + "</a></li>");
                    }
                });
                var s = "horizontal" == this.direction ? p.open : p.toggle;
                if (o.each(function() {
                    var n = e(this), o = n.attr("id");
                    e('a[href="#' + o + '"]', t.$menu).off(p.click).on(p.click, function(e) {
                        e.preventDefault(), n.trigger(s);
                    });
                }), "horizontal" == this.direction) {
                    var i = e("." + c.list + " > li." + c.selected, this.$menu);
                    i.add(i.parents("li")).parents("li").removeClass(c.selected).end().each(function() {
                        var t = e(this), n = t.find("> ." + c.panel);
                        n.length && (t.parents("." + c.panel).addClass(c.subopened), n.addClass(c.opened));
                    }).closest("." + c.panel).addClass(c.opened).parents("." + c.panel).addClass(c.subopened);
                } else e("li." + c.selected, this.$menu).addClass(c.opened).parents("." + c.selected).removeClass(c.selected);
                var l = o.filter("." + c.opened);
                l.length || (l = o.first()), l.addClass(c.opened).last().addClass(c.current), "horizontal" == this.direction && o.find("." + c.panel).appendTo(this.$menu);
            },
            _initLinks: function() {
                var t = this;
                e("." + c.list + " > li > a", this.$menu).not("." + c.subopen).not("." + c.subclose).not('[rel="external"]').not('[target="_blank"]').off(p.click).on(p.click, function(n) {
                    var o = e(this), s = o.attr("href");
                    t.__valueOrFn(t.opts.onClick.setSelected, o) && o.parent().trigger(p.setSelected);
                    var i = t.__valueOrFn(t.opts.onClick.preventDefault, o, "#" == s.slice(0, 1));
                    i && n.preventDefault(), t.__valueOrFn(t.opts.onClick.blockUI, o, !i) && d.$html.addClass(c.blocking), 
                    t.__valueOrFn(t.opts.onClick.close, o, i) && t.$menu.triggerHandler(p.close);
                });
            },
            _initOpenClose: function() {
                var t = this, n = this.$menu.attr("id");
                n && n.length && (this.conf.clone && (n = c.umm(n)), e('a[href="#' + n + '"]').off(p.click).on(p.click, function(e) {
                    e.preventDefault(), t.$menu.trigger(p.open);
                }));
                var n = d.$page.attr("id");
                n && n.length && e('a[href="#' + n + '"]').off(p.click).on(p.click, function(e) {
                    e.preventDefault(), t.$menu.trigger(p.close);
                });
            },
            __valueOrFn: function(e, t, n) {
                return "function" == typeof e ? e.call(t[0]) : "undefined" == typeof e && "undefined" != typeof n ? n : e;
            },
            __refactorClass: function(e, t) {
                e.removeClass(this.conf[t + "Class"]).addClass(c[t]);
            }
        }, e.fn[a] = function(s, i) {
            return d.$wndw || o(), s = t(s, i), i = n(i), this.each(function() {
                var t = e(this);
                t.data(a) || t.data(a, new e[a](t, s, i));
            });
        }, e[a].version = r, e[a].defaults = {
            position: "left",
            zposition: "back",
            moveBackground: !0,
            slidingSubmenus: !0,
            modal: !1,
            classes: "",
            onClick: {
                setSelected: !0
            }
        }, e[a].configuration = {
            preventTabbing: !0,
            panelClass: "Panel",
            listClass: "List",
            selectedClass: "Selected",
            labelClass: "Label",
            spacerClass: "Spacer",
            pageNodetype: "div",
            panelNodetype: "ul, ol, div",
            transitionDuration: 400
        }, function() {
            var t = window.document, n = window.navigator.userAgent, o = document.createElement("div").style, s = "ontouchstart" in t, i = "WebkitOverflowScrolling" in t.documentElement.style, l = function() {
                return "webkitTransition" in o ? "webkitTransition" : "transition" in o;
            }(), r = function() {
                return n.indexOf("Android") >= 0 ? 2.4 > parseFloat(n.slice(n.indexOf("Android") + 8)) : !1;
            }();
            e[a].support = {
                touch: s,
                transition: l,
                oldAndroidBrowser: r,
                overflowscrolling: function() {
                    return s ? i ? !0 : r ? !1 : !0 : !0;
                }()
            };
        }(), e[a].useOverflowScrollingFallback = function(e) {
            return d.$html ? ("boolean" == typeof e && d.$html[e ? "addClass" : "removeClass"](c.nooverflowscrolling), 
            d.$html.hasClass(c.nooverflowscrolling)) : (h = e, e);
        }, e[a].debug = function() {}, e[a].deprecated = function(e, t) {
            "undefined" != typeof console && "undefined" != typeof console.warn && console.warn("MMENU: " + e + " is deprecated, use " + t + " instead.");
        };
        var h = !e[a].support.overflowscrolling;
    }
}(jQuery), !function(a) {
    "use strict";
    function b(b) {
        var c = b.data;
        b.isDefaultPrevented() || (b.preventDefault(), a(this).ajaxSubmit(c));
    }
    function c(b) {
        var c = b.target, d = a(c);
        if (!d.is("[type=submit],[type=image]")) {
            var e = d.closest("[type=submit]");
            if (0 === e.length) return;
            c = e[0];
        }
        var f = this;
        if (f.clk = c, "image" == c.type) if (void 0 !== b.offsetX) f.clk_x = b.offsetX, 
        f.clk_y = b.offsetY; else if ("function" == typeof a.fn.offset) {
            var g = d.offset();
            f.clk_x = b.pageX - g.left, f.clk_y = b.pageY - g.top;
        } else f.clk_x = b.pageX - c.offsetLeft, f.clk_y = b.pageY - c.offsetTop;
        setTimeout(function() {
            f.clk = f.clk_x = f.clk_y = null;
        }, 100);
    }
    function d() {
        if (a.fn.ajaxSubmit.debug) {
            var b = "[jquery.form] " + Array.prototype.join.call(arguments, "");
            window.console && window.console.log ? window.console.log(b) : window.opera && window.opera.postError && window.opera.postError(b);
        }
    }
    var e = {};
    e.fileapi = void 0 !== a("<input type='file'/>").get(0).files, e.formdata = void 0 !== window.FormData;
    var f = !!a.fn.prop;
    a.fn.attr2 = function() {
        if (!f) return this.attr.apply(this, arguments);
        var a = this.prop.apply(this, arguments);
        return a && a.jquery || "string" == typeof a ? a : this.attr.apply(this, arguments);
    }, a.fn.ajaxSubmit = function(b) {
        function c(c) {
            var d, e, f = a.param(c, b.traditional).split("&"), g = f.length, h = [];
            for (d = 0; g > d; d++) f[d] = f[d].replace(/\+/g, " "), e = f[d].split("="), h.push([ decodeURIComponent(e[0]), decodeURIComponent(e[1]) ]);
            return h;
        }
        function g(d) {
            for (var e = new FormData(), f = 0; f < d.length; f++) e.append(d[f].name, d[f].value);
            if (b.extraData) {
                var g = c(b.extraData);
                for (f = 0; f < g.length; f++) g[f] && e.append(g[f][0], g[f][1]);
            }
            b.data = null;
            var h = a.extend(!0, {}, a.ajaxSettings, b, {
                contentType: !1,
                processData: !1,
                cache: !1,
                type: i || "POST"
            });
            b.uploadProgress && (h.xhr = function() {
                var c = a.ajaxSettings.xhr();
                return c.upload && c.upload.addEventListener("progress", function(a) {
                    var c = 0, d = a.loaded || a.position, e = a.total;
                    a.lengthComputable && (c = Math.ceil(100 * (d / e))), b.uploadProgress(a, d, e, c);
                }, !1), c;
            }), h.data = null;
            var j = h.beforeSend;
            return h.beforeSend = function(a, b) {
                b.data = e, j && j.call(this, a, b);
            }, a.ajax(h);
        }
        function h(c) {
            function e(a) {
                var b = null;
                try {
                    a.contentWindow && (b = a.contentWindow.document);
                } catch (c) {
                    d("cannot get iframe.contentWindow document: " + c);
                }
                if (b) return b;
                try {
                    b = a.contentDocument ? a.contentDocument : a.document;
                } catch (c) {
                    d("cannot get iframe.contentDocument: " + c), b = a.document;
                }
                return b;
            }
            function g() {
                function b() {
                    try {
                        var a = e(r).readyState;
                        d("state = " + a), a && "uninitialized" == a.toLowerCase() && setTimeout(b, 50);
                    } catch (c) {
                        d("Server abort: ", c, " (", c.name, ")"), h(A), w && clearTimeout(w), w = void 0;
                    }
                }
                var c = l.attr2("target"), f = l.attr2("action");
                x.setAttribute("target", o), i || x.setAttribute("method", "POST"), f != m.url && x.setAttribute("action", m.url), 
                m.skipEncodingOverride || i && !/post/i.test(i) || l.attr({
                    encoding: "multipart/form-data",
                    enctype: "multipart/form-data"
                }), m.timeout && (w = setTimeout(function() {
                    v = !0, h(z);
                }, m.timeout));
                var g = [];
                try {
                    if (m.extraData) for (var j in m.extraData) m.extraData.hasOwnProperty(j) && g.push(a.isPlainObject(m.extraData[j]) && m.extraData[j].hasOwnProperty("name") && m.extraData[j].hasOwnProperty("value") ? a('<input type="hidden" name="' + m.extraData[j].name + '">').val(m.extraData[j].value).appendTo(x)[0] : a('<input type="hidden" name="' + j + '">').val(m.extraData[j]).appendTo(x)[0]);
                    m.iframeTarget || (q.appendTo("body"), r.attachEvent ? r.attachEvent("onload", h) : r.addEventListener("load", h, !1)), 
                    setTimeout(b, 15);
                    try {
                        x.submit();
                    } catch (k) {
                        var n = document.createElement("form").submit;
                        n.apply(x);
                    }
                } finally {
                    x.setAttribute("action", f), c ? x.setAttribute("target", c) : l.removeAttr("target"), 
                    a(g).remove();
                }
            }
            function h(b) {
                if (!s.aborted && !F) {
                    if (E = e(r), E || (d("cannot access response document"), b = A), b === z && s) return s.abort("timeout"), 
                    void y.reject(s, "timeout");
                    if (b == A && s) return s.abort("server abort"), void y.reject(s, "error", "server abort");
                    if (E && E.location.href != m.iframeSrc || v) {
                        r.detachEvent ? r.detachEvent("onload", h) : r.removeEventListener("load", h, !1);
                        var c, f = "success";
                        try {
                            if (v) throw "timeout";
                            var g = "xml" == m.dataType || E.XMLDocument || a.isXMLDoc(E);
                            if (d("isXml=" + g), !g && window.opera && (null === E.body || !E.body.innerHTML) && --G) return d("requeing onLoad callback, DOM not available"), 
                            void setTimeout(h, 250);
                            var i = E.body ? E.body : E.documentElement;
                            s.responseText = i ? i.innerHTML : null, s.responseXML = E.XMLDocument ? E.XMLDocument : E, 
                            g && (m.dataType = "xml"), s.getResponseHeader = function(a) {
                                var b = {
                                    "content-type": m.dataType
                                };
                                return b[a];
                            }, i && (s.status = Number(i.getAttribute("status")) || s.status, s.statusText = i.getAttribute("statusText") || s.statusText);
                            var j = (m.dataType || "").toLowerCase(), k = /(json|script|text)/.test(j);
                            if (k || m.textarea) {
                                var l = E.getElementsByTagName("textarea")[0];
                                if (l) s.responseText = l.value, s.status = Number(l.getAttribute("status")) || s.status, 
                                s.statusText = l.getAttribute("statusText") || s.statusText; else if (k) {
                                    var o = E.getElementsByTagName("pre")[0], p = E.getElementsByTagName("body")[0];
                                    o ? s.responseText = o.textContent ? o.textContent : o.innerText : p && (s.responseText = p.textContent ? p.textContent : p.innerText);
                                }
                            } else "xml" == j && !s.responseXML && s.responseText && (s.responseXML = H(s.responseText));
                            try {
                                D = J(s, j, m);
                            } catch (t) {
                                f = "parsererror", s.error = c = t || f;
                            }
                        } catch (t) {
                            d("error caught: ", t), f = "error", s.error = c = t || f;
                        }
                        s.aborted && (d("upload aborted"), f = null), s.status && (f = s.status >= 200 && s.status < 300 || 304 === s.status ? "success" : "error"), 
                        "success" === f ? (m.success && m.success.call(m.context, D, "success", s), y.resolve(s.responseText, "success", s), 
                        n && a.event.trigger("ajaxSuccess", [ s, m ])) : f && (void 0 === c && (c = s.statusText), 
                        m.error && m.error.call(m.context, s, f, c), y.reject(s, "error", c), n && a.event.trigger("ajaxError", [ s, m, c ])), 
                        n && a.event.trigger("ajaxComplete", [ s, m ]), n && !--a.active && a.event.trigger("ajaxStop"), 
                        m.complete && m.complete.call(m.context, s, f), F = !0, m.timeout && clearTimeout(w), 
                        setTimeout(function() {
                            m.iframeTarget || q.remove(), s.responseXML = null;
                        }, 100);
                    }
                }
            }
            var j, k, m, n, o, q, r, s, t, u, v, w, x = l[0], y = a.Deferred();
            if (c) for (k = 0; k < p.length; k++) j = a(p[k]), f ? j.prop("disabled", !1) : j.removeAttr("disabled");
            if (m = a.extend(!0, {}, a.ajaxSettings, b), m.context = m.context || m, o = "jqFormIO" + new Date().getTime(), 
            m.iframeTarget ? (q = a(m.iframeTarget), u = q.attr2("name"), u ? o = u : q.attr2("name", o)) : (q = a('<iframe name="' + o + '" src="' + m.iframeSrc + '" />'), 
            q.css({
                position: "absolute",
                top: "-1000px",
                left: "-1000px"
            })), r = q[0], s = {
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: "n/a",
                getAllResponseHeaders: function() {},
                getResponseHeader: function() {},
                setRequestHeader: function() {},
                abort: function(b) {
                    var c = "timeout" === b ? "timeout" : "aborted";
                    d("aborting upload... " + c), this.aborted = 1;
                    try {
                        r.contentWindow.document.execCommand && r.contentWindow.document.execCommand("Stop");
                    } catch (e) {}
                    q.attr("src", m.iframeSrc), s.error = c, m.error && m.error.call(m.context, s, c, b), 
                    n && a.event.trigger("ajaxError", [ s, m, c ]), m.complete && m.complete.call(m.context, s, c);
                }
            }, n = m.global, n && 0 === a.active++ && a.event.trigger("ajaxStart"), n && a.event.trigger("ajaxSend", [ s, m ]), 
            m.beforeSend && m.beforeSend.call(m.context, s, m) === !1) return m.global && a.active--, 
            y.reject(), y;
            if (s.aborted) return y.reject(), y;
            t = x.clk, t && (u = t.name, u && !t.disabled && (m.extraData = m.extraData || {}, 
            m.extraData[u] = t.value, "image" == t.type && (m.extraData[u + ".x"] = x.clk_x, 
            m.extraData[u + ".y"] = x.clk_y)));
            var z = 1, A = 2, B = a("meta[name=csrf-token]").attr("content"), C = a("meta[name=csrf-param]").attr("content");
            C && B && (m.extraData = m.extraData || {}, m.extraData[C] = B), m.forceSync ? g() : setTimeout(g, 10);
            var D, E, F, G = 50, H = a.parseXML || function(a, b) {
                return window.ActiveXObject ? (b = new ActiveXObject("Microsoft.XMLDOM"), b.async = "false", 
                b.loadXML(a)) : b = new DOMParser().parseFromString(a, "text/xml"), b && b.documentElement && "parsererror" != b.documentElement.nodeName ? b : null;
            }, I = a.parseJSON || function(a) {
                return window.eval("(" + a + ")");
            }, J = function(b, c, d) {
                var e = b.getResponseHeader("content-type") || "", f = "xml" === c || !c && e.indexOf("xml") >= 0, g = f ? b.responseXML : b.responseText;
                return f && "parsererror" === g.documentElement.nodeName && a.error && a.error("parsererror"), 
                d && d.dataFilter && (g = d.dataFilter(g, c)), "string" == typeof g && ("json" === c || !c && e.indexOf("json") >= 0 ? g = I(g) : ("script" === c || !c && e.indexOf("javascript") >= 0) && a.globalEval(g)), 
                g;
            };
            return y;
        }
        if (!this.length) return d("ajaxSubmit: skipping submit process - no element selected"), 
        this;
        var i, j, k, l = this;
        "function" == typeof b ? b = {
            success: b
        } : void 0 === b && (b = {}), i = b.type || this.attr2("method"), j = b.url || this.attr2("action"), 
        k = "string" == typeof j ? a.trim(j) : "", k = k || window.location.href || "", 
        k && (k = (k.match(/^([^#]+)/) || [])[1]), b = a.extend(!0, {
            url: k,
            success: a.ajaxSettings.success,
            type: i || "GET",
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
        }, b);
        var m = {};
        if (this.trigger("form-pre-serialize", [ this, b, m ]), m.veto) return d("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), 
        this;
        if (b.beforeSerialize && b.beforeSerialize(this, b) === !1) return d("ajaxSubmit: submit aborted via beforeSerialize callback"), 
        this;
        var n = b.traditional;
        void 0 === n && (n = a.ajaxSettings.traditional);
        var o, p = [], q = this.formToArray(b.semantic, p);
        if (b.data && (b.extraData = b.data, o = a.param(b.data, n)), b.beforeSubmit && b.beforeSubmit(q, this, b) === !1) return d("ajaxSubmit: submit aborted via beforeSubmit callback"), 
        this;
        if (this.trigger("form-submit-validate", [ q, this, b, m ]), m.veto) return d("ajaxSubmit: submit vetoed via form-submit-validate trigger"), 
        this;
        var r = a.param(q, n);
        o && (r = r ? r + "&" + o : o), "GET" == b.type.toUpperCase() ? (b.url += (b.url.indexOf("?") >= 0 ? "&" : "?") + r, 
        b.data = null) : b.data = r;
        var s = [];
        if (b.resetForm && s.push(function() {
            l.resetForm();
        }), b.clearForm && s.push(function() {
            l.clearForm(b.includeHidden);
        }), !b.dataType && b.target) {
            var t = b.success || function() {};
            s.push(function(c) {
                var d = b.replaceTarget ? "replaceWith" : "html";
                a(b.target)[d](c).each(t, arguments);
            });
        } else b.success && s.push(b.success);
        if (b.success = function(a, c, d) {
            for (var e = b.context || this, f = 0, g = s.length; g > f; f++) s[f].apply(e, [ a, c, d || l, l ]);
        }, b.error) {
            var u = b.error;
            b.error = function(a, c, d) {
                var e = b.context || this;
                u.apply(e, [ a, c, d, l ]);
            };
        }
        if (b.complete) {
            var v = b.complete;
            b.complete = function(a, c) {
                var d = b.context || this;
                v.apply(d, [ a, c, l ]);
            };
        }
        var w = a('input[type=file]:enabled[value!=""]', this), x = w.length > 0, y = "multipart/form-data", z = l.attr("enctype") == y || l.attr("encoding") == y, A = e.fileapi && e.formdata;
        d("fileAPI :" + A);
        var B, C = (x || z) && !A;
        b.iframe !== !1 && (b.iframe || C) ? b.closeKeepAlive ? a.get(b.closeKeepAlive, function() {
            B = h(q);
        }) : B = h(q) : B = (x || z) && A ? g(q) : a.ajax(b), l.removeData("jqxhr").data("jqxhr", B);
        for (var D = 0; D < p.length; D++) p[D] = null;
        return this.trigger("form-submit-notify", [ this, b ]), this;
    }, a.fn.ajaxForm = function(e) {
        if (e = e || {}, e.delegation = e.delegation && a.isFunction(a.fn.on), !e.delegation && 0 === this.length) {
            var f = {
                s: this.selector,
                c: this.context
            };
            return !a.isReady && f.s ? (d("DOM not ready, queuing ajaxForm"), a(function() {
                a(f.s, f.c).ajaxForm(e);
            }), this) : (d("terminating; zero elements found by selector" + (a.isReady ? "" : " (DOM not ready)")), 
            this);
        }
        return e.delegation ? (a(document).off("submit.form-plugin", this.selector, b).off("click.form-plugin", this.selector, c).on("submit.form-plugin", this.selector, e, b).on("click.form-plugin", this.selector, e, c), 
        this) : this.ajaxFormUnbind().bind("submit.form-plugin", e, b).bind("click.form-plugin", e, c);
    }, a.fn.ajaxFormUnbind = function() {
        return this.unbind("submit.form-plugin click.form-plugin");
    }, a.fn.formToArray = function(b, c) {
        var d = [];
        if (0 === this.length) return d;
        var f = this[0], g = b ? f.getElementsByTagName("*") : f.elements;
        if (!g) return d;
        var h, i, j, k, l, m, n;
        for (h = 0, m = g.length; m > h; h++) if (l = g[h], j = l.name, j && !l.disabled) if (b && f.clk && "image" == l.type) f.clk == l && (d.push({
            name: j,
            value: a(l).val(),
            type: l.type
        }), d.push({
            name: j + ".x",
            value: f.clk_x
        }, {
            name: j + ".y",
            value: f.clk_y
        })); else if (k = a.fieldValue(l, !0), k && k.constructor == Array) for (c && c.push(l), 
        i = 0, n = k.length; n > i; i++) d.push({
            name: j,
            value: k[i]
        }); else if (e.fileapi && "file" == l.type) {
            c && c.push(l);
            var o = l.files;
            if (o.length) for (i = 0; i < o.length; i++) d.push({
                name: j,
                value: o[i],
                type: l.type
            }); else d.push({
                name: j,
                value: "",
                type: l.type
            });
        } else null !== k && "undefined" != typeof k && (c && c.push(l), d.push({
            name: j,
            value: k,
            type: l.type,
            required: l.required
        }));
        if (!b && f.clk) {
            var p = a(f.clk), q = p[0];
            j = q.name, j && !q.disabled && "image" == q.type && (d.push({
                name: j,
                value: p.val()
            }), d.push({
                name: j + ".x",
                value: f.clk_x
            }, {
                name: j + ".y",
                value: f.clk_y
            }));
        }
        return d;
    }, a.fn.formSerialize = function(b) {
        return a.param(this.formToArray(b));
    }, a.fn.fieldSerialize = function(b) {
        var c = [];
        return this.each(function() {
            var d = this.name;
            if (d) {
                var e = a.fieldValue(this, b);
                if (e && e.constructor == Array) for (var f = 0, g = e.length; g > f; f++) c.push({
                    name: d,
                    value: e[f]
                }); else null !== e && "undefined" != typeof e && c.push({
                    name: this.name,
                    value: e
                });
            }
        }), a.param(c);
    }, a.fn.fieldValue = function(b) {
        for (var c = [], d = 0, e = this.length; e > d; d++) {
            var f = this[d], g = a.fieldValue(f, b);
            null === g || "undefined" == typeof g || g.constructor == Array && !g.length || (g.constructor == Array ? a.merge(c, g) : c.push(g));
        }
        return c;
    }, a.fieldValue = function(b, c) {
        var d = b.name, e = b.type, f = b.tagName.toLowerCase();
        if (void 0 === c && (c = !0), c && (!d || b.disabled || "reset" == e || "button" == e || ("checkbox" == e || "radio" == e) && !b.checked || ("submit" == e || "image" == e) && b.form && b.form.clk != b || "select" == f && -1 == b.selectedIndex)) return null;
        if ("select" == f) {
            var g = b.selectedIndex;
            if (0 > g) return null;
            for (var h = [], i = b.options, j = "select-one" == e, k = j ? g + 1 : i.length, l = j ? g : 0; k > l; l++) {
                var m = i[l];
                if (m.selected) {
                    var n = m.value;
                    if (n || (n = m.attributes && m.attributes.value && !m.attributes.value.specified ? m.text : m.value), 
                    j) return n;
                    h.push(n);
                }
            }
            return h;
        }
        return a(b).val();
    }, a.fn.clearForm = function(b) {
        return this.each(function() {
            a("input,select,textarea", this).clearFields(b);
        });
    }, a.fn.clearFields = a.fn.clearInputs = function(b) {
        var c = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
        return this.each(function() {
            var d = this.type, e = this.tagName.toLowerCase();
            c.test(d) || "textarea" == e ? this.value = "" : "checkbox" == d || "radio" == d ? this.checked = !1 : "select" == e ? this.selectedIndex = -1 : "file" == d ? /MSIE/.test(navigator.userAgent) ? a(this).replaceWith(a(this).clone(!0)) : a(this).val("") : b && (b === !0 && /hidden/.test(d) || "string" == typeof b && a(this).is(b)) && (this.value = "");
        });
    }, a.fn.resetForm = function() {
        return this.each(function() {
            ("function" == typeof this.reset || "object" == typeof this.reset && !this.reset.nodeType) && this.reset();
        });
    }, a.fn.enable = function(a) {
        return void 0 === a && (a = !0), this.each(function() {
            this.disabled = !a;
        });
    }, a.fn.selected = function(b) {
        return void 0 === b && (b = !0), this.each(function() {
            var c = this.type;
            if ("checkbox" == c || "radio" == c) this.checked = b; else if ("option" == this.tagName.toLowerCase()) {
                var d = a(this).parent("select");
                b && d[0] && "select-one" == d[0].type && d.find("option").selected(!1), this.selected = b;
            }
        });
    }, a.fn.ajaxSubmit.debug = !1;
}(jQuery), function($) {
    var playerDivId = "jquery_say_js_jplayer_zero_size_div_id_" + Math.floor(1e9 * Math.random()), getTextToSpeechURL = function(s) {
        return "http://tts-api.com/tts.mp3?q=" + encodeURIComponent(s);
    }, say = function(s) {
        $("#" + playerDivId).size() && $("#" + playerDivId).remove();
        var playerDiv = $("<div style='width: 0px; height: 0px;' id='" + playerDivId + "'></div>"), bodyObject = $("body");
        bodyObject.size() ? (bodyObject.append(playerDiv), playerDiv.jPlayer({
            ready: function() {
                $("[data-say]").removeClass("progress"), $(this).jPlayer("setMedia", {
                    mp3: getTextToSpeechURL(s)
                }).jPlayer("play");
            }
        })) : alert("No <body> node to attach to.");
    };
    $.say = function(s) {
        s && say(s);
    }, $.getTextToSpeechURL = function(s) {
        return getTextToSpeechURL(s);
    }, $.fn.say = function(s) {
        return void 0 !== s ? say(s) : (s = this.text(), s && (s = s.trim(), say(s))), this;
    };
}(jQuery), function(b, f) {
    b.fn.jPlayer = function(a) {
        var c = "string" == typeof a, d = Array.prototype.slice.call(arguments, 1), e = this, a = !c && d.length ? b.extend.apply(null, [ !0, a ].concat(d)) : a;
        return c && "_" === a.charAt(0) ? e : (this.each(c ? function() {
            var c = b.data(this, "jPlayer"), h = c && b.isFunction(c[a]) ? c[a].apply(c, d) : c;
            return h !== c && h !== f ? (e = h, !1) : void 0;
        } : function() {
            var c = b.data(this, "jPlayer");
            c ? c.option(a || {}) : b.data(this, "jPlayer", new b.jPlayer(a, this));
        }), e);
    }, b.jPlayer = function(a, c) {
        if (arguments.length) {
            this.element = b(c), this.options = b.extend(!0, {}, this.options, a);
            var d = this;
            this.element.bind("remove.jPlayer", function() {
                d.destroy();
            }), this._init();
        }
    }, b.jPlayer.emulateMethods = "load play pause", b.jPlayer.emulateStatus = "src readyState networkState currentTime duration paused ended playbackRate", 
    b.jPlayer.emulateOptions = "muted volume", b.jPlayer.reservedEvent = "ready flashreset resize repeat error warning", 
    b.jPlayer.event = {
        ready: "jPlayer_ready",
        flashreset: "jPlayer_flashreset",
        resize: "jPlayer_resize",
        repeat: "jPlayer_repeat",
        click: "jPlayer_click",
        error: "jPlayer_error",
        warning: "jPlayer_warning",
        loadstart: "jPlayer_loadstart",
        progress: "jPlayer_progress",
        suspend: "jPlayer_suspend",
        abort: "jPlayer_abort",
        emptied: "jPlayer_emptied",
        stalled: "jPlayer_stalled",
        play: "jPlayer_play",
        pause: "jPlayer_pause",
        loadedmetadata: "jPlayer_loadedmetadata",
        loadeddata: "jPlayer_loadeddata",
        waiting: "jPlayer_waiting",
        playing: "jPlayer_playing",
        canplay: "jPlayer_canplay",
        canplaythrough: "jPlayer_canplaythrough",
        seeking: "jPlayer_seeking",
        seeked: "jPlayer_seeked",
        timeupdate: "jPlayer_timeupdate",
        ended: "jPlayer_ended",
        ratechange: "jPlayer_ratechange",
        durationchange: "jPlayer_durationchange",
        volumechange: "jPlayer_volumechange"
    }, b.jPlayer.htmlEvent = "loadstart abort emptied stalled loadedmetadata loadeddata canplay canplaythrough ratechange".split(" "), 
    b.jPlayer.pause = function() {
        b.each(b.jPlayer.prototype.instances, function(a, c) {
            c.data("jPlayer").status.srcSet && c.jPlayer("pause");
        });
    }, b.jPlayer.timeFormat = {
        showHour: !1,
        showMin: !0,
        showSec: !0,
        padHour: !1,
        padMin: !0,
        padSec: !0,
        sepHour: ":",
        sepMin: ":",
        sepSec: ""
    }, b.jPlayer.convertTime = function(a) {
        var c = new Date(1e3 * a), d = c.getUTCHours(), a = c.getUTCMinutes(), c = c.getUTCSeconds(), d = b.jPlayer.timeFormat.padHour && 10 > d ? "0" + d : d, a = b.jPlayer.timeFormat.padMin && 10 > a ? "0" + a : a, c = b.jPlayer.timeFormat.padSec && 10 > c ? "0" + c : c;
        return (b.jPlayer.timeFormat.showHour ? d + b.jPlayer.timeFormat.sepHour : "") + (b.jPlayer.timeFormat.showMin ? a + b.jPlayer.timeFormat.sepMin : "") + (b.jPlayer.timeFormat.showSec ? c + b.jPlayer.timeFormat.sepSec : "");
    }, b.jPlayer.uaBrowser = function(a) {
        var a = a.toLowerCase(), c = /(opera)(?:.*version)?[ \/]([\w.]+)/, b = /(msie) ([\w.]+)/, e = /(mozilla)(?:.*? rv:([\w.]+))?/, a = /(webkit)[ \/]([\w.]+)/.exec(a) || c.exec(a) || b.exec(a) || 0 > a.indexOf("compatible") && e.exec(a) || [];
        return {
            browser: a[1] || "",
            version: a[2] || "0"
        };
    }, b.jPlayer.uaPlatform = function(a) {
        var b = a.toLowerCase(), d = /(android)/, e = /(mobile)/, a = /(ipad|iphone|ipod|android|blackberry|playbook|windows ce|webos)/.exec(b) || [], b = /(ipad|playbook)/.exec(b) || !e.exec(b) && d.exec(b) || [];
        return a[1] && (a[1] = a[1].replace(/\s/g, "_")), {
            platform: a[1] || "",
            tablet: b[1] || ""
        };
    }, b.jPlayer.browser = {}, b.jPlayer.platform = {};
    var i = b.jPlayer.uaBrowser(navigator.userAgent);
    i.browser && (b.jPlayer.browser[i.browser] = !0, b.jPlayer.browser.version = i.version), 
    i = b.jPlayer.uaPlatform(navigator.userAgent), i.platform && (b.jPlayer.platform[i.platform] = !0, 
    b.jPlayer.platform.mobile = !i.tablet, b.jPlayer.platform.tablet = !!i.tablet), 
    b.jPlayer.prototype = {
        count: 0,
        version: {
            script: "2.2.0",
            needFlash: "2.2.0",
            flash: "unknown"
        },
        options: {
            swfPath: "js",
            solution: "html, flash",
            supplied: "mp3",
            preload: "metadata",
            volume: .8,
            muted: !1,
            wmode: "opaque",
            backgroundColor: "#000000",
            cssSelectorAncestor: "#jp_container_1",
            cssSelector: {
                videoPlay: ".jp-video-play",
                play: ".jp-play",
                pause: ".jp-pause",
                stop: ".jp-stop",
                seekBar: ".jp-seek-bar",
                playBar: ".jp-play-bar",
                mute: ".jp-mute",
                unmute: ".jp-unmute",
                volumeBar: ".jp-volume-bar",
                volumeBarValue: ".jp-volume-bar-value",
                volumeMax: ".jp-volume-max",
                currentTime: ".jp-current-time",
                duration: ".jp-duration",
                fullScreen: ".jp-full-screen",
                restoreScreen: ".jp-restore-screen",
                repeat: ".jp-repeat",
                repeatOff: ".jp-repeat-off",
                gui: ".jp-gui",
                noSolution: ".jp-no-solution"
            },
            fullScreen: !1,
            autohide: {
                restored: !1,
                full: !0,
                fadeIn: 200,
                fadeOut: 600,
                hold: 1e3
            },
            loop: !1,
            repeat: function(a) {
                a.jPlayer.options.loop ? b(this).unbind(".jPlayerRepeat").bind(b.jPlayer.event.ended + ".jPlayer.jPlayerRepeat", function() {
                    b(this).jPlayer("play");
                }) : b(this).unbind(".jPlayerRepeat");
            },
            nativeVideoControls: {},
            noFullScreen: {
                msie: /msie [0-6]/,
                ipad: /ipad.*?os [0-4]/,
                iphone: /iphone/,
                ipod: /ipod/,
                android_pad: /android [0-3](?!.*?mobile)/,
                android_phone: /android.*?mobile/,
                blackberry: /blackberry/,
                windows_ce: /windows ce/,
                webos: /webos/
            },
            noVolume: {
                ipad: /ipad/,
                iphone: /iphone/,
                ipod: /ipod/,
                android_pad: /android(?!.*?mobile)/,
                android_phone: /android.*?mobile/,
                blackberry: /blackberry/,
                windows_ce: /windows ce/,
                webos: /webos/,
                playbook: /playbook/
            },
            verticalVolume: !1,
            idPrefix: "jp",
            noConflict: "jQuery",
            emulateHtml: !1,
            errorAlerts: !1,
            warningAlerts: !1
        },
        optionsAudio: {
            size: {
                width: "0px",
                height: "0px",
                cssClass: ""
            },
            sizeFull: {
                width: "0px",
                height: "0px",
                cssClass: ""
            }
        },
        optionsVideo: {
            size: {
                width: "480px",
                height: "270px",
                cssClass: "jp-video-270p"
            },
            sizeFull: {
                width: "100%",
                height: "100%",
                cssClass: "jp-video-full"
            }
        },
        instances: {},
        status: {
            src: "",
            media: {},
            paused: !0,
            format: {},
            formatType: "",
            waitForPlay: !0,
            waitForLoad: !0,
            srcSet: !1,
            video: !1,
            seekPercent: 0,
            currentPercentRelative: 0,
            currentPercentAbsolute: 0,
            currentTime: 0,
            duration: 0,
            readyState: 0,
            networkState: 0,
            playbackRate: 1,
            ended: 0
        },
        internal: {
            ready: !1
        },
        solution: {
            html: !0,
            flash: !0
        },
        format: {
            mp3: {
                codec: 'audio/mpeg; codecs="mp3"',
                flashCanPlay: !0,
                media: "audio"
            },
            m4a: {
                codec: 'audio/mp4; codecs="mp4a.40.2"',
                flashCanPlay: !0,
                media: "audio"
            },
            oga: {
                codec: 'audio/ogg; codecs="vorbis"',
                flashCanPlay: !1,
                media: "audio"
            },
            wav: {
                codec: 'audio/wav; codecs="1"',
                flashCanPlay: !1,
                media: "audio"
            },
            webma: {
                codec: 'audio/webm; codecs="vorbis"',
                flashCanPlay: !1,
                media: "audio"
            },
            fla: {
                codec: "audio/x-flv",
                flashCanPlay: !0,
                media: "audio"
            },
            rtmpa: {
                codec: 'audio/rtmp; codecs="rtmp"',
                flashCanPlay: !0,
                media: "audio"
            },
            m4v: {
                codec: 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"',
                flashCanPlay: !0,
                media: "video"
            },
            ogv: {
                codec: 'video/ogg; codecs="theora, vorbis"',
                flashCanPlay: !1,
                media: "video"
            },
            webmv: {
                codec: 'video/webm; codecs="vorbis, vp8"',
                flashCanPlay: !1,
                media: "video"
            },
            flv: {
                codec: "video/x-flv",
                flashCanPlay: !0,
                media: "video"
            },
            rtmpv: {
                codec: 'video/rtmp; codecs="rtmp"',
                flashCanPlay: !0,
                media: "video"
            }
        },
        _init: function() {
            var a = this;
            if (this.element.empty(), this.status = b.extend({}, this.status), this.internal = b.extend({}, this.internal), 
            this.internal.domNode = this.element.get(0), this.formats = [], this.solutions = [], 
            this.require = {}, this.htmlElement = {}, this.html = {}, this.html.audio = {}, 
            this.html.video = {}, this.flash = {}, this.css = {}, this.css.cs = {}, this.css.jq = {}, 
            this.ancestorJq = [], this.options.volume = this._limitValue(this.options.volume, 0, 1), 
            b.each(this.options.supplied.toLowerCase().split(","), function(c, d) {
                var e = d.replace(/^\s+|\s+$/g, "");
                if (a.format[e]) {
                    var f = !1;
                    b.each(a.formats, function(a, b) {
                        return e === b ? (f = !0, !1) : void 0;
                    }), f || a.formats.push(e);
                }
            }), b.each(this.options.solution.toLowerCase().split(","), function(c, d) {
                var e = d.replace(/^\s+|\s+$/g, "");
                if (a.solution[e]) {
                    var f = !1;
                    b.each(a.solutions, function(a, b) {
                        return e === b ? (f = !0, !1) : void 0;
                    }), f || a.solutions.push(e);
                }
            }), this.internal.instance = "jp_" + this.count, this.instances[this.internal.instance] = this.element, 
            this.element.attr("id") || this.element.attr("id", this.options.idPrefix + "_jplayer_" + this.count), 
            this.internal.self = b.extend({}, {
                id: this.element.attr("id"),
                jq: this.element
            }), this.internal.audio = b.extend({}, {
                id: this.options.idPrefix + "_audio_" + this.count,
                jq: f
            }), this.internal.video = b.extend({}, {
                id: this.options.idPrefix + "_video_" + this.count,
                jq: f
            }), this.internal.flash = b.extend({}, {
                id: this.options.idPrefix + "_flash_" + this.count,
                jq: f,
                swf: this.options.swfPath + (".swf" !== this.options.swfPath.toLowerCase().slice(-4) ? (this.options.swfPath && "/" !== this.options.swfPath.slice(-1) ? "/" : "") + "Jplayer.swf" : "")
            }), this.internal.poster = b.extend({}, {
                id: this.options.idPrefix + "_poster_" + this.count,
                jq: f
            }), b.each(b.jPlayer.event, function(b, c) {
                a.options[b] !== f && (a.element.bind(c + ".jPlayer", a.options[b]), a.options[b] = f);
            }), this.require.audio = !1, this.require.video = !1, b.each(this.formats, function(b, c) {
                a.require[a.format[c].media] = !0;
            }), this.options = this.require.video ? b.extend(!0, {}, this.optionsVideo, this.options) : b.extend(!0, {}, this.optionsAudio, this.options), 
            this._setSize(), this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls), 
            this.status.noFullScreen = this._uaBlocklist(this.options.noFullScreen), this.status.noVolume = this._uaBlocklist(this.options.noVolume), 
            this._restrictNativeVideoControls(), this.htmlElement.poster = document.createElement("img"), 
            this.htmlElement.poster.id = this.internal.poster.id, this.htmlElement.poster.onload = function() {
                (!a.status.video || a.status.waitForPlay) && a.internal.poster.jq.show();
            }, this.element.append(this.htmlElement.poster), this.internal.poster.jq = b("#" + this.internal.poster.id), 
            this.internal.poster.jq.css({
                width: this.status.width,
                height: this.status.height
            }), this.internal.poster.jq.hide(), this.internal.poster.jq.bind("click.jPlayer", function() {
                a._trigger(b.jPlayer.event.click);
            }), this.html.audio.available = !1, this.require.audio && (this.htmlElement.audio = document.createElement("audio"), 
            this.htmlElement.audio.id = this.internal.audio.id, this.html.audio.available = !!this.htmlElement.audio.canPlayType && this._testCanPlayType(this.htmlElement.audio)), 
            this.html.video.available = !1, this.require.video && (this.htmlElement.video = document.createElement("video"), 
            this.htmlElement.video.id = this.internal.video.id, this.html.video.available = !!this.htmlElement.video.canPlayType && this._testCanPlayType(this.htmlElement.video)), 
            this.flash.available = this._checkForFlash(10), this.html.canPlay = {}, this.flash.canPlay = {}, 
            b.each(this.formats, function(b, c) {
                a.html.canPlay[c] = a.html[a.format[c].media].available && "" !== a.htmlElement[a.format[c].media].canPlayType(a.format[c].codec), 
                a.flash.canPlay[c] = a.format[c].flashCanPlay && a.flash.available;
            }), this.html.desired = !1, this.flash.desired = !1, b.each(this.solutions, function(c, d) {
                if (0 === c) a[d].desired = !0; else {
                    var e = !1, f = !1;
                    b.each(a.formats, function(b, c) {
                        a[a.solutions[0]].canPlay[c] && ("video" === a.format[c].media ? f = !0 : e = !0);
                    }), a[d].desired = a.require.audio && !e || a.require.video && !f;
                }
            }), this.html.support = {}, this.flash.support = {}, b.each(this.formats, function(b, c) {
                a.html.support[c] = a.html.canPlay[c] && a.html.desired, a.flash.support[c] = a.flash.canPlay[c] && a.flash.desired;
            }), this.html.used = !1, this.flash.used = !1, b.each(this.solutions, function(c, d) {
                b.each(a.formats, function(b, c) {
                    return a[d].support[c] ? (a[d].used = !0, !1) : void 0;
                });
            }), this._resetActive(), this._resetGate(), this._cssSelectorAncestor(this.options.cssSelectorAncestor), 
            this.html.used || this.flash.used ? this.css.jq.noSolution.length && this.css.jq.noSolution.hide() : (this._error({
                type: b.jPlayer.error.NO_SOLUTION,
                context: "{solution:'" + this.options.solution + "', supplied:'" + this.options.supplied + "'}",
                message: b.jPlayer.errorMsg.NO_SOLUTION,
                hint: b.jPlayer.errorHint.NO_SOLUTION
            }), this.css.jq.noSolution.length && this.css.jq.noSolution.show()), this.flash.used) {
                var c, d = "jQuery=" + encodeURI(this.options.noConflict) + "&id=" + encodeURI(this.internal.self.id) + "&vol=" + this.options.volume + "&muted=" + this.options.muted;
                if (b.jPlayer.browser.msie && Number(b.jPlayer.browser.version) <= 8) {
                    d = [ '<param name="movie" value="' + this.internal.flash.swf + '" />', '<param name="FlashVars" value="' + d + '" />', '<param name="allowScriptAccess" value="always" />', '<param name="bgcolor" value="' + this.options.backgroundColor + '" />', '<param name="wmode" value="' + this.options.wmode + '" />' ], 
                    c = document.createElement('<object id="' + this.internal.flash.id + '" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="0" height="0"></object>');
                    for (var e = 0; e < d.length; e++) c.appendChild(document.createElement(d[e]));
                } else e = function(a, b, c) {
                    var d = document.createElement("param");
                    d.setAttribute("name", b), d.setAttribute("value", c), a.appendChild(d);
                }, c = document.createElement("object"), c.setAttribute("id", this.internal.flash.id), 
                c.setAttribute("data", this.internal.flash.swf), c.setAttribute("type", "application/x-shockwave-flash"), 
                c.setAttribute("width", "1"), c.setAttribute("height", "1"), e(c, "flashvars", d), 
                e(c, "allowscriptaccess", "always"), e(c, "bgcolor", this.options.backgroundColor), 
                e(c, "wmode", this.options.wmode);
                this.element.append(c), this.internal.flash.jq = b(c);
            }
            this.html.used && (this.html.audio.available && (this._addHtmlEventListeners(this.htmlElement.audio, this.html.audio), 
            this.element.append(this.htmlElement.audio), this.internal.audio.jq = b("#" + this.internal.audio.id)), 
            this.html.video.available && (this._addHtmlEventListeners(this.htmlElement.video, this.html.video), 
            this.element.append(this.htmlElement.video), this.internal.video.jq = b("#" + this.internal.video.id), 
            this.internal.video.jq.css(this.status.nativeVideoControls ? {
                width: this.status.width,
                height: this.status.height
            } : {
                width: "0px",
                height: "0px"
            }), this.internal.video.jq.bind("click.jPlayer", function() {
                a._trigger(b.jPlayer.event.click);
            }))), this.options.emulateHtml && this._emulateHtmlBridge(), this.html.used && !this.flash.used && setTimeout(function() {
                a.internal.ready = !0, a.version.flash = "n/a", a._trigger(b.jPlayer.event.repeat), 
                a._trigger(b.jPlayer.event.ready);
            }, 100), this._updateNativeVideoControls(), this._updateInterface(), this._updateButtons(!1), 
            this._updateAutohide(), this._updateVolume(this.options.volume), this._updateMute(this.options.muted), 
            this.css.jq.videoPlay.length && this.css.jq.videoPlay.hide(), b.jPlayer.prototype.count++;
        },
        destroy: function() {
            this.clearMedia(), this._removeUiClass(), this.css.jq.currentTime.length && this.css.jq.currentTime.text(""), 
            this.css.jq.duration.length && this.css.jq.duration.text(""), b.each(this.css.jq, function(a, b) {
                b.length && b.unbind(".jPlayer");
            }), this.internal.poster.jq.unbind(".jPlayer"), this.internal.video.jq && this.internal.video.jq.unbind(".jPlayer"), 
            this.options.emulateHtml && this._destroyHtmlBridge(), this.element.removeData("jPlayer"), 
            this.element.unbind(".jPlayer"), this.element.empty(), delete this.instances[this.internal.instance];
        },
        enable: function() {},
        disable: function() {},
        _testCanPlayType: function(a) {
            try {
                return a.canPlayType(this.format.mp3.codec), !0;
            } catch (b) {
                return !1;
            }
        },
        _uaBlocklist: function(a) {
            var c = navigator.userAgent.toLowerCase(), d = !1;
            return b.each(a, function(a, b) {
                return b && b.test(c) ? (d = !0, !1) : void 0;
            }), d;
        },
        _restrictNativeVideoControls: function() {
            this.require.audio && this.status.nativeVideoControls && (this.status.nativeVideoControls = !1, 
            this.status.noFullScreen = !0);
        },
        _updateNativeVideoControls: function() {
            this.html.video.available && this.html.used && (this.htmlElement.video.controls = this.status.nativeVideoControls, 
            this._updateAutohide(), this.status.nativeVideoControls && this.require.video ? (this.internal.poster.jq.hide(), 
            this.internal.video.jq.css({
                width: this.status.width,
                height: this.status.height
            })) : this.status.waitForPlay && this.status.video && (this.internal.poster.jq.show(), 
            this.internal.video.jq.css({
                width: "0px",
                height: "0px"
            })));
        },
        _addHtmlEventListeners: function(a, c) {
            var d = this;
            a.preload = this.options.preload, a.muted = this.options.muted, a.volume = this.options.volume, 
            a.addEventListener("progress", function() {
                c.gate && (d._getHtmlStatus(a), d._updateInterface(), d._trigger(b.jPlayer.event.progress));
            }, !1), a.addEventListener("timeupdate", function() {
                c.gate && (d._getHtmlStatus(a), d._updateInterface(), d._trigger(b.jPlayer.event.timeupdate));
            }, !1), a.addEventListener("durationchange", function() {
                c.gate && (d._getHtmlStatus(a), d._updateInterface(), d._trigger(b.jPlayer.event.durationchange));
            }, !1), a.addEventListener("play", function() {
                c.gate && (d._updateButtons(!0), d._html_checkWaitForPlay(), d._trigger(b.jPlayer.event.play));
            }, !1), a.addEventListener("playing", function() {
                c.gate && (d._updateButtons(!0), d._seeked(), d._trigger(b.jPlayer.event.playing));
            }, !1), a.addEventListener("pause", function() {
                c.gate && (d._updateButtons(!1), d._trigger(b.jPlayer.event.pause));
            }, !1), a.addEventListener("waiting", function() {
                c.gate && (d._seeking(), d._trigger(b.jPlayer.event.waiting));
            }, !1), a.addEventListener("seeking", function() {
                c.gate && (d._seeking(), d._trigger(b.jPlayer.event.seeking));
            }, !1), a.addEventListener("seeked", function() {
                c.gate && (d._seeked(), d._trigger(b.jPlayer.event.seeked));
            }, !1), a.addEventListener("volumechange", function() {
                c.gate && (d.options.volume = a.volume, d.options.muted = a.muted, d._updateMute(), 
                d._updateVolume(), d._trigger(b.jPlayer.event.volumechange));
            }, !1), a.addEventListener("suspend", function() {
                c.gate && (d._seeked(), d._trigger(b.jPlayer.event.suspend));
            }, !1), a.addEventListener("ended", function() {
                c.gate && (b.jPlayer.browser.webkit || (d.htmlElement.media.currentTime = 0), d.htmlElement.media.pause(), 
                d._updateButtons(!1), d._getHtmlStatus(a, !0), d._updateInterface(), d._trigger(b.jPlayer.event.ended));
            }, !1), a.addEventListener("error", function() {
                c.gate && (d._updateButtons(!1), d._seeked(), d.status.srcSet && (clearTimeout(d.internal.htmlDlyCmdId), 
                d.status.waitForLoad = !0, d.status.waitForPlay = !0, d.status.video && !d.status.nativeVideoControls && d.internal.video.jq.css({
                    width: "0px",
                    height: "0px"
                }), d._validString(d.status.media.poster) && !d.status.nativeVideoControls && d.internal.poster.jq.show(), 
                d.css.jq.videoPlay.length && d.css.jq.videoPlay.show(), d._error({
                    type: b.jPlayer.error.URL,
                    context: d.status.src,
                    message: b.jPlayer.errorMsg.URL,
                    hint: b.jPlayer.errorHint.URL
                })));
            }, !1), b.each(b.jPlayer.htmlEvent, function(e, g) {
                a.addEventListener(this, function() {
                    c.gate && d._trigger(b.jPlayer.event[g]);
                }, !1);
            });
        },
        _getHtmlStatus: function(a, b) {
            var d = 0, e = 0, g = 0, f = 0;
            isFinite(a.duration) && (this.status.duration = a.duration), d = a.currentTime, 
            e = this.status.duration > 0 ? 100 * d / this.status.duration : 0, "object" == typeof a.seekable && a.seekable.length > 0 ? (g = this.status.duration > 0 ? 100 * a.seekable.end(a.seekable.length - 1) / this.status.duration : 100, 
            f = this.status.duration > 0 ? 100 * a.currentTime / a.seekable.end(a.seekable.length - 1) : 0) : (g = 100, 
            f = e), b && (e = f = d = 0), this.status.seekPercent = g, this.status.currentPercentRelative = f, 
            this.status.currentPercentAbsolute = e, this.status.currentTime = d, this.status.readyState = a.readyState, 
            this.status.networkState = a.networkState, this.status.playbackRate = a.playbackRate, 
            this.status.ended = a.ended;
        },
        _resetStatus: function() {
            this.status = b.extend({}, this.status, b.jPlayer.prototype.status);
        },
        _trigger: function(a, c, d) {
            a = b.Event(a), a.jPlayer = {}, a.jPlayer.version = b.extend({}, this.version), 
            a.jPlayer.options = b.extend(!0, {}, this.options), a.jPlayer.status = b.extend(!0, {}, this.status), 
            a.jPlayer.html = b.extend(!0, {}, this.html), a.jPlayer.flash = b.extend(!0, {}, this.flash), 
            c && (a.jPlayer.error = b.extend({}, c)), d && (a.jPlayer.warning = b.extend({}, d)), 
            this.element.trigger(a);
        },
        jPlayerFlashEvent: function(a, c) {
            if (a === b.jPlayer.event.ready) if (this.internal.ready) {
                if (this.flash.gate) {
                    if (this.status.srcSet) {
                        var d = this.status.currentTime, e = this.status.paused;
                        this.setMedia(this.status.media), d > 0 && (e ? this.pause(d) : this.play(d));
                    }
                    this._trigger(b.jPlayer.event.flashreset);
                }
            } else this.internal.ready = !0, this.internal.flash.jq.css({
                width: "0px",
                height: "0px"
            }), this.version.flash = c.version, this.version.needFlash !== this.version.flash && this._error({
                type: b.jPlayer.error.VERSION,
                context: this.version.flash,
                message: b.jPlayer.errorMsg.VERSION + this.version.flash,
                hint: b.jPlayer.errorHint.VERSION
            }), this._trigger(b.jPlayer.event.repeat), this._trigger(a);
            if (this.flash.gate) switch (a) {
              case b.jPlayer.event.progress:
                this._getFlashStatus(c), this._updateInterface(), this._trigger(a);
                break;

              case b.jPlayer.event.timeupdate:
                this._getFlashStatus(c), this._updateInterface(), this._trigger(a);
                break;

              case b.jPlayer.event.play:
                this._seeked(), this._updateButtons(!0), this._trigger(a);
                break;

              case b.jPlayer.event.pause:
                this._updateButtons(!1), this._trigger(a);
                break;

              case b.jPlayer.event.ended:
                this._updateButtons(!1), this._trigger(a);
                break;

              case b.jPlayer.event.click:
                this._trigger(a);
                break;

              case b.jPlayer.event.error:
                this.status.waitForLoad = !0, this.status.waitForPlay = !0, this.status.video && this.internal.flash.jq.css({
                    width: "0px",
                    height: "0px"
                }), this._validString(this.status.media.poster) && this.internal.poster.jq.show(), 
                this.css.jq.videoPlay.length && this.status.video && this.css.jq.videoPlay.show(), 
                this.status.video ? this._flash_setVideo(this.status.media) : this._flash_setAudio(this.status.media), 
                this._updateButtons(!1), this._error({
                    type: b.jPlayer.error.URL,
                    context: c.src,
                    message: b.jPlayer.errorMsg.URL,
                    hint: b.jPlayer.errorHint.URL
                });
                break;

              case b.jPlayer.event.seeking:
                this._seeking(), this._trigger(a);
                break;

              case b.jPlayer.event.seeked:
                this._seeked(), this._trigger(a);
                break;

              case b.jPlayer.event.ready:
                break;

              default:
                this._trigger(a);
            }
            return !1;
        },
        _getFlashStatus: function(a) {
            this.status.seekPercent = a.seekPercent, this.status.currentPercentRelative = a.currentPercentRelative, 
            this.status.currentPercentAbsolute = a.currentPercentAbsolute, this.status.currentTime = a.currentTime, 
            this.status.duration = a.duration, this.status.readyState = 4, this.status.networkState = 0, 
            this.status.playbackRate = 1, this.status.ended = !1;
        },
        _updateButtons: function(a) {
            a !== f && (this.status.paused = !a, this.css.jq.play.length && this.css.jq.pause.length && (a ? (this.css.jq.play.hide(), 
            this.css.jq.pause.show()) : (this.css.jq.play.show(), this.css.jq.pause.hide()))), 
            this.css.jq.restoreScreen.length && this.css.jq.fullScreen.length && (this.status.noFullScreen ? (this.css.jq.fullScreen.hide(), 
            this.css.jq.restoreScreen.hide()) : this.options.fullScreen ? (this.css.jq.fullScreen.hide(), 
            this.css.jq.restoreScreen.show()) : (this.css.jq.fullScreen.show(), this.css.jq.restoreScreen.hide())), 
            this.css.jq.repeat.length && this.css.jq.repeatOff.length && (this.options.loop ? (this.css.jq.repeat.hide(), 
            this.css.jq.repeatOff.show()) : (this.css.jq.repeat.show(), this.css.jq.repeatOff.hide()));
        },
        _updateInterface: function() {
            this.css.jq.seekBar.length && this.css.jq.seekBar.width(this.status.seekPercent + "%"), 
            this.css.jq.playBar.length && this.css.jq.playBar.width(this.status.currentPercentRelative + "%"), 
            this.css.jq.currentTime.length && this.css.jq.currentTime.text(b.jPlayer.convertTime(this.status.currentTime)), 
            this.css.jq.duration.length && this.css.jq.duration.text(b.jPlayer.convertTime(this.status.duration));
        },
        _seeking: function() {
            this.css.jq.seekBar.length && this.css.jq.seekBar.addClass("jp-seeking-bg");
        },
        _seeked: function() {
            this.css.jq.seekBar.length && this.css.jq.seekBar.removeClass("jp-seeking-bg");
        },
        _resetGate: function() {
            this.html.audio.gate = !1, this.html.video.gate = !1, this.flash.gate = !1;
        },
        _resetActive: function() {
            this.html.active = !1, this.flash.active = !1;
        },
        setMedia: function(a) {
            var c = this, d = !1, e = this.status.media.poster !== a.poster;
            this._resetMedia(), this._resetGate(), this._resetActive(), b.each(this.formats, function(e, f) {
                var i = "video" === c.format[f].media;
                return b.each(c.solutions, function(b, e) {
                    if (c[e].support[f] && c._validString(a[f])) {
                        var g = "html" === e;
                        return i ? (g ? (c.html.video.gate = !0, c._html_setVideo(a), c.html.active = !0) : (c.flash.gate = !0, 
                        c._flash_setVideo(a), c.flash.active = !0), c.css.jq.videoPlay.length && c.css.jq.videoPlay.show(), 
                        c.status.video = !0) : (g ? (c.html.audio.gate = !0, c._html_setAudio(a), c.html.active = !0) : (c.flash.gate = !0, 
                        c._flash_setAudio(a), c.flash.active = !0), c.css.jq.videoPlay.length && c.css.jq.videoPlay.hide(), 
                        c.status.video = !1), d = !0, !1;
                    }
                }), d ? !1 : void 0;
            }), d ? (this.status.nativeVideoControls && this.html.video.gate || !this._validString(a.poster) || (e ? this.htmlElement.poster.src = a.poster : this.internal.poster.jq.show()), 
            this.status.srcSet = !0, this.status.media = b.extend({}, a), this._updateButtons(!1), 
            this._updateInterface()) : this._error({
                type: b.jPlayer.error.NO_SUPPORT,
                context: "{supplied:'" + this.options.supplied + "'}",
                message: b.jPlayer.errorMsg.NO_SUPPORT,
                hint: b.jPlayer.errorHint.NO_SUPPORT
            });
        },
        _resetMedia: function() {
            this._resetStatus(), this._updateButtons(!1), this._updateInterface(), this._seeked(), 
            this.internal.poster.jq.hide(), clearTimeout(this.internal.htmlDlyCmdId), this.html.active ? this._html_resetMedia() : this.flash.active && this._flash_resetMedia();
        },
        clearMedia: function() {
            this._resetMedia(), this.html.active ? this._html_clearMedia() : this.flash.active && this._flash_clearMedia(), 
            this._resetGate(), this._resetActive();
        },
        load: function() {
            this.status.srcSet ? this.html.active ? this._html_load() : this.flash.active && this._flash_load() : this._urlNotSetError("load");
        },
        play: function(a) {
            a = "number" == typeof a ? a : 0/0, this.status.srcSet ? this.html.active ? this._html_play(a) : this.flash.active && this._flash_play(a) : this._urlNotSetError("play");
        },
        videoPlay: function() {
            this.play();
        },
        pause: function(a) {
            a = "number" == typeof a ? a : 0/0, this.status.srcSet ? this.html.active ? this._html_pause(a) : this.flash.active && this._flash_pause(a) : this._urlNotSetError("pause");
        },
        pauseOthers: function() {
            var a = this;
            b.each(this.instances, function(b, d) {
                a.element !== d && d.data("jPlayer").status.srcSet && d.jPlayer("pause");
            });
        },
        stop: function() {
            this.status.srcSet ? this.html.active ? this._html_pause(0) : this.flash.active && this._flash_pause(0) : this._urlNotSetError("stop");
        },
        playHead: function(a) {
            a = this._limitValue(a, 0, 100), this.status.srcSet ? this.html.active ? this._html_playHead(a) : this.flash.active && this._flash_playHead(a) : this._urlNotSetError("playHead");
        },
        _muted: function(a) {
            this.options.muted = a, this.html.used && this._html_mute(a), this.flash.used && this._flash_mute(a), 
            this.html.video.gate || this.html.audio.gate || (this._updateMute(a), this._updateVolume(this.options.volume), 
            this._trigger(b.jPlayer.event.volumechange));
        },
        mute: function(a) {
            a = a === f ? !0 : !!a, this._muted(a);
        },
        unmute: function(a) {
            a = a === f ? !0 : !!a, this._muted(!a);
        },
        _updateMute: function(a) {
            a === f && (a = this.options.muted), this.css.jq.mute.length && this.css.jq.unmute.length && (this.status.noVolume ? (this.css.jq.mute.hide(), 
            this.css.jq.unmute.hide()) : a ? (this.css.jq.mute.hide(), this.css.jq.unmute.show()) : (this.css.jq.mute.show(), 
            this.css.jq.unmute.hide()));
        },
        volume: function(a) {
            a = this._limitValue(a, 0, 1), this.options.volume = a, this.html.used && this._html_volume(a), 
            this.flash.used && this._flash_volume(a), this.html.video.gate || this.html.audio.gate || (this._updateVolume(a), 
            this._trigger(b.jPlayer.event.volumechange));
        },
        volumeBar: function(a) {
            if (this.css.jq.volumeBar.length) {
                var b = this.css.jq.volumeBar.offset(), d = a.pageX - b.left, e = this.css.jq.volumeBar.width(), a = this.css.jq.volumeBar.height() - a.pageY + b.top, b = this.css.jq.volumeBar.height();
                this.volume(this.options.verticalVolume ? a / b : d / e);
            }
            this.options.muted && this._muted(!1);
        },
        volumeBarValue: function(a) {
            this.volumeBar(a);
        },
        _updateVolume: function(a) {
            a === f && (a = this.options.volume), a = this.options.muted ? 0 : a, this.status.noVolume ? (this.css.jq.volumeBar.length && this.css.jq.volumeBar.hide(), 
            this.css.jq.volumeBarValue.length && this.css.jq.volumeBarValue.hide(), this.css.jq.volumeMax.length && this.css.jq.volumeMax.hide()) : (this.css.jq.volumeBar.length && this.css.jq.volumeBar.show(), 
            this.css.jq.volumeBarValue.length && (this.css.jq.volumeBarValue.show(), this.css.jq.volumeBarValue[this.options.verticalVolume ? "height" : "width"](100 * a + "%")), 
            this.css.jq.volumeMax.length && this.css.jq.volumeMax.show());
        },
        volumeMax: function() {
            this.volume(1), this.options.muted && this._muted(!1);
        },
        _cssSelectorAncestor: function(a) {
            var c = this;
            this.options.cssSelectorAncestor = a, this._removeUiClass(), this.ancestorJq = a ? b(a) : [], 
            a && 1 !== this.ancestorJq.length && this._warning({
                type: b.jPlayer.warning.CSS_SELECTOR_COUNT,
                context: a,
                message: b.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.ancestorJq.length + " found for cssSelectorAncestor.",
                hint: b.jPlayer.warningHint.CSS_SELECTOR_COUNT
            }), this._addUiClass(), b.each(this.options.cssSelector, function(a, b) {
                c._cssSelector(a, b);
            });
        },
        _cssSelector: function(a, c) {
            var d = this;
            "string" == typeof c ? b.jPlayer.prototype.options.cssSelector[a] ? (this.css.jq[a] && this.css.jq[a].length && this.css.jq[a].unbind(".jPlayer"), 
            this.options.cssSelector[a] = c, this.css.cs[a] = this.options.cssSelectorAncestor + " " + c, 
            this.css.jq[a] = c ? b(this.css.cs[a]) : [], this.css.jq[a].length && this.css.jq[a].bind("click.jPlayer", function(c) {
                return d[a](c), b(this).blur(), !1;
            }), c && 1 !== this.css.jq[a].length && this._warning({
                type: b.jPlayer.warning.CSS_SELECTOR_COUNT,
                context: this.css.cs[a],
                message: b.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.css.jq[a].length + " found for " + a + " method.",
                hint: b.jPlayer.warningHint.CSS_SELECTOR_COUNT
            })) : this._warning({
                type: b.jPlayer.warning.CSS_SELECTOR_METHOD,
                context: a,
                message: b.jPlayer.warningMsg.CSS_SELECTOR_METHOD,
                hint: b.jPlayer.warningHint.CSS_SELECTOR_METHOD
            }) : this._warning({
                type: b.jPlayer.warning.CSS_SELECTOR_STRING,
                context: c,
                message: b.jPlayer.warningMsg.CSS_SELECTOR_STRING,
                hint: b.jPlayer.warningHint.CSS_SELECTOR_STRING
            });
        },
        seekBar: function(a) {
            if (this.css.jq.seekBar) {
                var b = this.css.jq.seekBar.offset(), a = a.pageX - b.left, b = this.css.jq.seekBar.width();
                this.playHead(100 * a / b);
            }
        },
        playBar: function(a) {
            this.seekBar(a);
        },
        repeat: function() {
            this._loop(!0);
        },
        repeatOff: function() {
            this._loop(!1);
        },
        _loop: function(a) {
            this.options.loop !== a && (this.options.loop = a, this._updateButtons(), this._trigger(b.jPlayer.event.repeat));
        },
        currentTime: function() {},
        duration: function() {},
        gui: function() {},
        noSolution: function() {},
        option: function(a, c) {
            var d = a;
            if (0 === arguments.length) return b.extend(!0, {}, this.options);
            if ("string" == typeof a) {
                var e = a.split(".");
                if (c === f) {
                    for (var d = b.extend(!0, {}, this.options), g = 0; g < e.length; g++) {
                        if (d[e[g]] === f) return this._warning({
                            type: b.jPlayer.warning.OPTION_KEY,
                            context: a,
                            message: b.jPlayer.warningMsg.OPTION_KEY,
                            hint: b.jPlayer.warningHint.OPTION_KEY
                        }), f;
                        d = d[e[g]];
                    }
                    return d;
                }
                for (var g = d = {}, h = 0; h < e.length; h++) h < e.length - 1 ? (g[e[h]] = {}, 
                g = g[e[h]]) : g[e[h]] = c;
            }
            return this._setOptions(d), this;
        },
        _setOptions: function(a) {
            var c = this;
            return b.each(a, function(a, b) {
                c._setOption(a, b);
            }), this;
        },
        _setOption: function(a, c) {
            var d = this;
            switch (a) {
              case "volume":
                this.volume(c);
                break;

              case "muted":
                this._muted(c);
                break;

              case "cssSelectorAncestor":
                this._cssSelectorAncestor(c);
                break;

              case "cssSelector":
                b.each(c, function(a, b) {
                    d._cssSelector(a, b);
                });
                break;

              case "fullScreen":
                this.options[a] !== c && (this._removeUiClass(), this.options[a] = c, this._refreshSize());
                break;

              case "size":
                !this.options.fullScreen && this.options[a].cssClass !== c.cssClass && this._removeUiClass(), 
                this.options[a] = b.extend({}, this.options[a], c), this._refreshSize();
                break;

              case "sizeFull":
                this.options.fullScreen && this.options[a].cssClass !== c.cssClass && this._removeUiClass(), 
                this.options[a] = b.extend({}, this.options[a], c), this._refreshSize();
                break;

              case "autohide":
                this.options[a] = b.extend({}, this.options[a], c), this._updateAutohide();
                break;

              case "loop":
                this._loop(c);
                break;

              case "nativeVideoControls":
                this.options[a] = b.extend({}, this.options[a], c), this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls), 
                this._restrictNativeVideoControls(), this._updateNativeVideoControls();
                break;

              case "noFullScreen":
                this.options[a] = b.extend({}, this.options[a], c), this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls), 
                this.status.noFullScreen = this._uaBlocklist(this.options.noFullScreen), this._restrictNativeVideoControls(), 
                this._updateButtons();
                break;

              case "noVolume":
                this.options[a] = b.extend({}, this.options[a], c), this.status.noVolume = this._uaBlocklist(this.options.noVolume), 
                this._updateVolume(), this._updateMute();
                break;

              case "emulateHtml":
                this.options[a] !== c && ((this.options[a] = c) ? this._emulateHtmlBridge() : this._destroyHtmlBridge());
            }
            return this;
        },
        _refreshSize: function() {
            this._setSize(), this._addUiClass(), this._updateSize(), this._updateButtons(), 
            this._updateAutohide(), this._trigger(b.jPlayer.event.resize);
        },
        _setSize: function() {
            this.options.fullScreen ? (this.status.width = this.options.sizeFull.width, this.status.height = this.options.sizeFull.height, 
            this.status.cssClass = this.options.sizeFull.cssClass) : (this.status.width = this.options.size.width, 
            this.status.height = this.options.size.height, this.status.cssClass = this.options.size.cssClass), 
            this.element.css({
                width: this.status.width,
                height: this.status.height
            });
        },
        _addUiClass: function() {
            this.ancestorJq.length && this.ancestorJq.addClass(this.status.cssClass);
        },
        _removeUiClass: function() {
            this.ancestorJq.length && this.ancestorJq.removeClass(this.status.cssClass);
        },
        _updateSize: function() {
            this.internal.poster.jq.css({
                width: this.status.width,
                height: this.status.height
            }), !this.status.waitForPlay && this.html.active && this.status.video || this.html.video.available && this.html.used && this.status.nativeVideoControls ? this.internal.video.jq.css({
                width: this.status.width,
                height: this.status.height
            }) : !this.status.waitForPlay && this.flash.active && this.status.video && this.internal.flash.jq.css({
                width: this.status.width,
                height: this.status.height
            });
        },
        _updateAutohide: function() {
            var a = this, b = function() {
                a.css.jq.gui.fadeIn(a.options.autohide.fadeIn, function() {
                    clearTimeout(a.internal.autohideId), a.internal.autohideId = setTimeout(function() {
                        a.css.jq.gui.fadeOut(a.options.autohide.fadeOut);
                    }, a.options.autohide.hold);
                });
            };
            this.css.jq.gui.length && (this.css.jq.gui.stop(!0, !0), clearTimeout(this.internal.autohideId), 
            this.element.unbind(".jPlayerAutohide"), this.css.jq.gui.unbind(".jPlayerAutohide"), 
            this.status.nativeVideoControls ? this.css.jq.gui.hide() : this.options.fullScreen && this.options.autohide.full || !this.options.fullScreen && this.options.autohide.restored ? (this.element.bind("mousemove.jPlayer.jPlayerAutohide", b), 
            this.css.jq.gui.bind("mousemove.jPlayer.jPlayerAutohide", b), this.css.jq.gui.hide()) : this.css.jq.gui.show());
        },
        fullScreen: function() {
            this._setOption("fullScreen", !0);
        },
        restoreScreen: function() {
            this._setOption("fullScreen", !1);
        },
        _html_initMedia: function() {
            this.htmlElement.media.src = this.status.src, "none" !== this.options.preload && this._html_load(), 
            this._trigger(b.jPlayer.event.timeupdate);
        },
        _html_setAudio: function(a) {
            var c = this;
            b.each(this.formats, function(b, e) {
                return c.html.support[e] && a[e] ? (c.status.src = a[e], c.status.format[e] = !0, 
                c.status.formatType = e, !1) : void 0;
            }), this.htmlElement.media = this.htmlElement.audio, this._html_initMedia();
        },
        _html_setVideo: function(a) {
            var c = this;
            b.each(this.formats, function(b, e) {
                return c.html.support[e] && a[e] ? (c.status.src = a[e], c.status.format[e] = !0, 
                c.status.formatType = e, !1) : void 0;
            }), this.status.nativeVideoControls && (this.htmlElement.video.poster = this._validString(a.poster) ? a.poster : ""), 
            this.htmlElement.media = this.htmlElement.video, this._html_initMedia();
        },
        _html_resetMedia: function() {
            this.htmlElement.media && (this.htmlElement.media.id === this.internal.video.id && !this.status.nativeVideoControls && this.internal.video.jq.css({
                width: "0px",
                height: "0px"
            }), this.htmlElement.media.pause());
        },
        _html_clearMedia: function() {
            this.htmlElement.media && (this.htmlElement.media.src = "", this.htmlElement.media.load());
        },
        _html_load: function() {
            this.status.waitForLoad && (this.status.waitForLoad = !1, this.htmlElement.media.load()), 
            clearTimeout(this.internal.htmlDlyCmdId);
        },
        _html_play: function(a) {
            var b = this;
            if (this._html_load(), this.htmlElement.media.play(), !isNaN(a)) try {
                this.htmlElement.media.currentTime = a;
            } catch (d) {
                return void (this.internal.htmlDlyCmdId = setTimeout(function() {
                    b.play(a);
                }, 100));
            }
            this._html_checkWaitForPlay();
        },
        _html_pause: function(a) {
            var b = this;
            if (a > 0 ? this._html_load() : clearTimeout(this.internal.htmlDlyCmdId), this.htmlElement.media.pause(), 
            !isNaN(a)) try {
                this.htmlElement.media.currentTime = a;
            } catch (d) {
                return void (this.internal.htmlDlyCmdId = setTimeout(function() {
                    b.pause(a);
                }, 100));
            }
            a > 0 && this._html_checkWaitForPlay();
        },
        _html_playHead: function(a) {
            var b = this;
            this._html_load();
            try {
                if ("object" == typeof this.htmlElement.media.seekable && this.htmlElement.media.seekable.length > 0) this.htmlElement.media.currentTime = a * this.htmlElement.media.seekable.end(this.htmlElement.media.seekable.length - 1) / 100; else {
                    if (!(this.htmlElement.media.duration > 0) || isNaN(this.htmlElement.media.duration)) throw "e";
                    this.htmlElement.media.currentTime = a * this.htmlElement.media.duration / 100;
                }
            } catch (d) {
                return void (this.internal.htmlDlyCmdId = setTimeout(function() {
                    b.playHead(a);
                }, 100));
            }
            this.status.waitForLoad || this._html_checkWaitForPlay();
        },
        _html_checkWaitForPlay: function() {
            this.status.waitForPlay && (this.status.waitForPlay = !1, this.css.jq.videoPlay.length && this.css.jq.videoPlay.hide(), 
            this.status.video && (this.internal.poster.jq.hide(), this.internal.video.jq.css({
                width: this.status.width,
                height: this.status.height
            })));
        },
        _html_volume: function(a) {
            this.html.audio.available && (this.htmlElement.audio.volume = a), this.html.video.available && (this.htmlElement.video.volume = a);
        },
        _html_mute: function(a) {
            this.html.audio.available && (this.htmlElement.audio.muted = a), this.html.video.available && (this.htmlElement.video.muted = a);
        },
        _flash_setAudio: function(a) {
            var c = this;
            try {
                b.each(this.formats, function(b, d) {
                    if (c.flash.support[d] && a[d]) {
                        switch (d) {
                          case "m4a":
                          case "fla":
                            c._getMovie().fl_setAudio_m4a(a[d]);
                            break;

                          case "mp3":
                            c._getMovie().fl_setAudio_mp3(a[d]);
                            break;

                          case "rtmpa":
                            c._getMovie().fl_setAudio_rtmp(a[d]);
                        }
                        return c.status.src = a[d], c.status.format[d] = !0, c.status.formatType = d, !1;
                    }
                }), "auto" === this.options.preload && (this._flash_load(), this.status.waitForLoad = !1);
            } catch (d) {
                this._flashError(d);
            }
        },
        _flash_setVideo: function(a) {
            var c = this;
            try {
                b.each(this.formats, function(b, d) {
                    if (c.flash.support[d] && a[d]) {
                        switch (d) {
                          case "m4v":
                          case "flv":
                            c._getMovie().fl_setVideo_m4v(a[d]);
                            break;

                          case "rtmpv":
                            c._getMovie().fl_setVideo_rtmp(a[d]);
                        }
                        return c.status.src = a[d], c.status.format[d] = !0, c.status.formatType = d, !1;
                    }
                }), "auto" === this.options.preload && (this._flash_load(), this.status.waitForLoad = !1);
            } catch (d) {
                this._flashError(d);
            }
        },
        _flash_resetMedia: function() {
            this.internal.flash.jq.css({
                width: "0px",
                height: "0px"
            }), this._flash_pause(0/0);
        },
        _flash_clearMedia: function() {
            try {
                this._getMovie().fl_clearMedia();
            } catch (a) {
                this._flashError(a);
            }
        },
        _flash_load: function() {
            try {
                this._getMovie().fl_load();
            } catch (a) {
                this._flashError(a);
            }
            this.status.waitForLoad = !1;
        },
        _flash_play: function(a) {
            try {
                this._getMovie().fl_play(a);
            } catch (b) {
                this._flashError(b);
            }
            this.status.waitForLoad = !1, this._flash_checkWaitForPlay();
        },
        _flash_pause: function(a) {
            try {
                this._getMovie().fl_pause(a);
            } catch (b) {
                this._flashError(b);
            }
            a > 0 && (this.status.waitForLoad = !1, this._flash_checkWaitForPlay());
        },
        _flash_playHead: function(a) {
            try {
                this._getMovie().fl_play_head(a);
            } catch (b) {
                this._flashError(b);
            }
            this.status.waitForLoad || this._flash_checkWaitForPlay();
        },
        _flash_checkWaitForPlay: function() {
            this.status.waitForPlay && (this.status.waitForPlay = !1, this.css.jq.videoPlay.length && this.css.jq.videoPlay.hide(), 
            this.status.video && (this.internal.poster.jq.hide(), this.internal.flash.jq.css({
                width: this.status.width,
                height: this.status.height
            })));
        },
        _flash_volume: function(a) {
            try {
                this._getMovie().fl_volume(a);
            } catch (b) {
                this._flashError(b);
            }
        },
        _flash_mute: function(a) {
            try {
                this._getMovie().fl_mute(a);
            } catch (b) {
                this._flashError(b);
            }
        },
        _getMovie: function() {
            return document[this.internal.flash.id];
        },
        _checkForFlash: function(a) {
            var d, b = !1;
            if (window.ActiveXObject) try {
                new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + a), b = !0;
            } catch (e) {} else navigator.plugins && navigator.mimeTypes.length > 0 && (d = navigator.plugins["Shockwave Flash"]) && navigator.plugins["Shockwave Flash"].description.replace(/.*\s(\d+\.\d+).*/, "$1") >= a && (b = !0);
            return b;
        },
        _validString: function(a) {
            return a && "string" == typeof a;
        },
        _limitValue: function(a, b, d) {
            return b > a ? b : a > d ? d : a;
        },
        _urlNotSetError: function(a) {
            this._error({
                type: b.jPlayer.error.URL_NOT_SET,
                context: a,
                message: b.jPlayer.errorMsg.URL_NOT_SET,
                hint: b.jPlayer.errorHint.URL_NOT_SET
            });
        },
        _flashError: function(a) {
            var c;
            c = this.internal.ready ? "FLASH_DISABLED" : "FLASH", this._error({
                type: b.jPlayer.error[c],
                context: this.internal.flash.swf,
                message: b.jPlayer.errorMsg[c] + a.message,
                hint: b.jPlayer.errorHint[c]
            }), this.internal.flash.jq.css({
                width: "1px",
                height: "1px"
            });
        },
        _error: function(a) {
            this._trigger(b.jPlayer.event.error, a), this.options.errorAlerts && this._alert("Error!" + (a.message ? "\n\n" + a.message : "") + (a.hint ? "\n\n" + a.hint : "") + "\n\nContext: " + a.context);
        },
        _warning: function(a) {
            this._trigger(b.jPlayer.event.warning, f, a), this.options.warningAlerts && this._alert("Warning!" + (a.message ? "\n\n" + a.message : "") + (a.hint ? "\n\n" + a.hint : "") + "\n\nContext: " + a.context);
        },
        _alert: function(a) {
            alert("jPlayer " + this.version.script + " : id='" + this.internal.self.id + "' : " + a);
        },
        _emulateHtmlBridge: function() {
            var a = this;
            b.each(b.jPlayer.emulateMethods.split(/\s+/g), function(b, d) {
                a.internal.domNode[d] = function(b) {
                    a[d](b);
                };
            }), b.each(b.jPlayer.event, function(c, d) {
                var e = !0;
                b.each(b.jPlayer.reservedEvent.split(/\s+/g), function(a, b) {
                    return b === c ? e = !1 : void 0;
                }), e && a.element.bind(d + ".jPlayer.jPlayerHtml", function() {
                    a._emulateHtmlUpdate();
                    var b = document.createEvent("Event");
                    b.initEvent(c, !1, !0), a.internal.domNode.dispatchEvent(b);
                });
            });
        },
        _emulateHtmlUpdate: function() {
            var a = this;
            b.each(b.jPlayer.emulateStatus.split(/\s+/g), function(b, d) {
                a.internal.domNode[d] = a.status[d];
            }), b.each(b.jPlayer.emulateOptions.split(/\s+/g), function(b, d) {
                a.internal.domNode[d] = a.options[d];
            });
        },
        _destroyHtmlBridge: function() {
            var a = this;
            this.element.unbind(".jPlayerHtml"), b.each((b.jPlayer.emulateMethods + " " + b.jPlayer.emulateStatus + " " + b.jPlayer.emulateOptions).split(/\s+/g), function(b, d) {
                delete a.internal.domNode[d];
            });
        }
    }, b.jPlayer.error = {
        FLASH: "e_flash",
        FLASH_DISABLED: "e_flash_disabled",
        NO_SOLUTION: "e_no_solution",
        NO_SUPPORT: "e_no_support",
        URL: "e_url",
        URL_NOT_SET: "e_url_not_set",
        VERSION: "e_version"
    }, b.jPlayer.errorMsg = {
        FLASH: "jPlayer's Flash fallback is not configured correctly, or a command was issued before the jPlayer Ready event. Details: ",
        FLASH_DISABLED: "jPlayer's Flash fallback has been disabled by the browser due to the CSS rules you have used. Details: ",
        NO_SOLUTION: "No solution can be found by jPlayer in this browser. Neither HTML nor Flash can be used.",
        NO_SUPPORT: "It is not possible to play any media format provided in setMedia() on this browser using your current options.",
        URL: "Media URL could not be loaded.",
        URL_NOT_SET: "Attempt to issue media playback commands, while no media url is set.",
        VERSION: "jPlayer " + b.jPlayer.prototype.version.script + " needs Jplayer.swf version " + b.jPlayer.prototype.version.needFlash + " but found "
    }, b.jPlayer.errorHint = {
        FLASH: "Check your swfPath option and that Jplayer.swf is there.",
        FLASH_DISABLED: "Check that you have not display:none; the jPlayer entity or any ancestor.",
        NO_SOLUTION: "Review the jPlayer options: support and supplied.",
        NO_SUPPORT: "Video or audio formats defined in the supplied option are missing.",
        URL: "Check media URL is valid.",
        URL_NOT_SET: "Use setMedia() to set the media URL.",
        VERSION: "Update jPlayer files."
    }, b.jPlayer.warning = {
        CSS_SELECTOR_COUNT: "e_css_selector_count",
        CSS_SELECTOR_METHOD: "e_css_selector_method",
        CSS_SELECTOR_STRING: "e_css_selector_string",
        OPTION_KEY: "e_option_key"
    }, b.jPlayer.warningMsg = {
        CSS_SELECTOR_COUNT: "The number of css selectors found did not equal one: ",
        CSS_SELECTOR_METHOD: "The methodName given in jPlayer('cssSelector') is not a valid jPlayer method.",
        CSS_SELECTOR_STRING: "The methodCssSelector given in jPlayer('cssSelector') is not a String or is empty.",
        OPTION_KEY: "The option requested in jPlayer('option') is undefined."
    }, b.jPlayer.warningHint = {
        CSS_SELECTOR_COUNT: "Check your css selector and the ancestor.",
        CSS_SELECTOR_METHOD: "Check your method name.",
        CSS_SELECTOR_STRING: "Check your css selector is a string.",
        OPTION_KEY: "Check your option name."
    };
}(jQuery), $(document).ready(function() {
    function whereAmI() {
        var location = window.location.href.match(/([^/])+/g);
        return location[location.length - 1];
    }
    function sendForm($form, required_params, $sender_email) {
        for (i = 0; i < required_params.length; i++) {
            var input = $("#" + required_params[i]);
            "" == input.val() || input.val() == emptyerror ? (input.addClass("error"), input.val(emptyerror)) : input.removeClass("error");
        }
        return /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test($sender_email.val()) || ($sender_email.addClass("error"), 
        $sender_email.val(emailerror)), $form.find(":input").hasClass("error") ? !1 : !0;
    }
    $("#close_exam").on("click", function() {
        $(".overlay").fadeOut(), $("#exam_popup").fadeOut(), history.pushState("", document.title, window.location.pathname);
    }), $("#start_exam").on("click", function() {
        parent.location.hash = "startExam", $("#exam_popup, .overlay").fadeIn(700), $("html, body").animate({
            scrollTop: 0
        }, 700);
    }), $("body").prepend("<div class='overlay' style='display: none;'></div>"), $("#exam_popup").appendTo("body"), 
    "#startExam" == whereAmI() && $("#start_exam").trigger("click"), $.fn.randomize = function(childElem) {
        return this.each(function() {
            var $this = $(this), elems = $this.children(childElem);
            elems.sort(function() {
                return Math.round(Math.random()) - .5;
            }), $this.remove(childElem);
            for (var i = 0; i < elems.length; i++) $this.append(elems[i]);
        });
    }, $("#exam li").randomize("div.option"), $(".checkbox, .text").on("click", function() {
        $(this).closest("li").find(".option").removeClass("active wrong correct"), $(this).closest("li").find(".error_message").fadeOut(), 
        $(this).closest(".option").addClass("active");
    }), $("#check_results").on("click", function() {
        var correct = 0, wrong = 0;
        $("#exam li").each(function() {
            var $answer = $(this).find(".active");
            if ("X" == $answer.data("true")) $(this).data("answer", "correct"), correct++, $(this).find(".error_message").fadeOut(), 
            $(this).removeClass("try_again"), $answer.addClass("correct"); else {
                $(this).data("answer", "wrong"), $(this).addClass("try_again"), wrong++;
                var $errorMessage = $(this).find(".error_message");
                0 == $answer.length ? $errorMessage.text($errorMessage.data("no-answer")).fadeIn() : ($errorMessage.text($answer.data("error-message")).fadeIn(), 
                $answer.addClass("wrong"));
            }
        });
        var $resultMessage = $("#exam_popup .result");
        if (wrong > 0) {
            var diff = 0;
            diff = $resultMessage.is(":visible") ? -10 : 45, $("html, body").animate({
                scrollTop: $(".try_again:first").offset().top + diff
            }, 700), $("#check_results").text("Провери отново!");
        } else $("html, body").animate({
            scrollTop: 0
        }, 700);
        var share_url = window.location.href, share_image = "http://placehold.it/400x400/ACE1AF/FFF%26text=EXERCISE", title = "Упражнение по английски език | EasierEnglish.BG", description = "Резултат: " + correct + " верни отговора от общо " + questions_count + " въпроса.", FB_url = "http://www.facebook.com/sharer.php?s=100&p[title]=" + title + "&p[summary]=" + description + "&p[url]=" + encodeURIComponent(share_url) + "&p[images][0]=" + share_image;
        jQuery("#ref_fb").attr("href", FB_url);
        var questions_count = $("#exam li").length;
        correct >= parseInt(questions_count) / 2 + 1 ? ($resultMessage.removeClass("bad").addClass("good"), 
        $("#ref_fb").fadeIn()) : $resultMessage.removeClass("good").addClass("bad"), $resultMessage.html("Резултат: <strong>" + correct + " верни отговора</strong> от общо " + questions_count + ".").fadeIn();
    }), emptyerror = "Задължително поле!", emailerror = "Въведи валиден e-mail!", $(":input").focus(function() {
        $(this).hasClass("error") && ($(this).val(""), $(this).removeClass("error"));
    }), $contactsForm = $("#contactsForm");
    var required_contactsForm = [ "contact_name", "contact_email", "contact_message" ];
    $contactsForm_email = $("#contact_email"), $contactsForm.submit(function() {
        if (sendForm($contactsForm, required_contactsForm, $contactsForm_email)) {
            var jqxhr = $.post(templateUrl + "/EmailSenders/sendMailFormContacts.php", {
                contact_name: $("#contact_name").val(),
                contact_email: $("#contact_email").val(),
                contact_subject: $("#contact_subject").val(),
                contact_message: $("#contact_message").val()
            });
            return jqxhr.success(function() {
                $contactsForm.fadeOut(function() {
                    $contactsForm.html("<strong class='success'>Получихме съобщението! :)</strong>").fadeIn();
                });
            }), !1;
        }
        return !1;
    }), $("#submit_contactsForm").on("click", function() {
        return $contactsForm.submit(), !1;
    }), $askQuestion_form = $("#get-free-consultation-form");
    var required_askQuestion_Form = [ "contact_name", "contact_email", "contact_message" ];
    $askQuestion_form_email = $("#contact_email"), $askQuestion_form.submit(function() {
        if (sendForm($askQuestion_form, required_askQuestion_Form, $askQuestion_form_email)) {
            var jqxhr = $.post(templateUrl + "/EmailSenders/sendQuestion.php", {
                contact_name: $("#contact_name").val(),
                contact_email: $("#contact_email").val(),
                contact_message: $("#contact_message").val(),
                contact_city: $("#contact_city").val(),
                contact_age: $("#contact_age").val(),
                topic: $("h1").text()
            });
            return jqxhr.success(function() {
                $askQuestion_form.fadeOut(function() {
                    $("#feedback_form").html("<p><strong class='success'>Получихме въпроса :)!</strong> Очаквай отговор от нас.</p>").hide().fadeIn(600);
                });
            }), jqxhr.error(function() {
                $askQuestion_form.fadeOut(function() {
                    $("#feedback_form").append("<p><strong class='fail'>Ооооупс, нещо формата се счупи :(</strong> Опитай да ни изпратиш запитването директно на мейл: <a href='mailto:team@easierenglish.bg'>team@easierenglish.bg</a> :)</p>").hide().fadeIn(600);
                });
            }), !1;
        }
        return !1;
    }), $("#submit_questionForm").on("click", function() {
        return $askQuestion_form.submit(), !1;
    });
    var teacherApply_div = $("#teacherApply_div");
    teacherApply_div.hide(), $("#fireTeacherApply_form").on("click", function() {
        $(this).fadeOut(), teacherApply_div.slideDown();
    }), $teacherApply_form = $("#teacherApply_form");
    var required_teacherApply_form = [ "teacher_name", "teacher_email", "teacher_message" ];
    $teacherApply_form_email = $("#teacher_email"), $teacherApply_form.submit(function() {
        if (sendForm($teacherApply_form, required_teacherApply_form, $teacherApply_form_email)) {
            var jqxhr = $.post(templateUrl + "/EmailSenders/applyForTeacher.php", {
                teacher_name: $("#teacher_name").val(),
                teacher_linkedin: $("#teacher_linkedin").val(),
                teacher_phone: $("#teacher_phone").val(),
                teacher_email: $("#teacher_email").val(),
                teacher_message: $("#teacher_message").val()
            });
            return jqxhr.success(function() {
                $teacherApply_form.fadeOut(function() {
                    $teacherApply_form.html("<p><strong class='success'>Заявката е получена!</strong> Съвсем скоро ще се свържем с теб :)</p>").hide().fadeIn(600);
                });
            }), !1;
        }
        return !1;
    }), $("#submit_applyForTeacherForm").on("click", function() {
        return $teacherApply_form.submit(), !1;
    }), teacherApply_div.hide(), $("#fireTeacherApply_form").on("click", function() {
        $(this).fadeOut(), teacherApply_div.slideDown();
    }), $lessonRequest_form = $("#LessonResuestForm"), $lessonRequest_form.hide(), $("#fireLessonRequest_form").on("click", function() {
        $lessonRequest_form.slideToggle();
    });
    var required_lessonRequest_form = [ "request_contact_name", "request_contact_email", "request_message" ];
    $lessonRequest_form_email = $("#request_contact_email"), $lessonRequest_form.submit(function() {
        if (sendForm($lessonRequest_form, required_lessonRequest_form, $lessonRequest_form_email)) {
            var jqxhr = $.post(templateUrl + "/EmailSenders/requestLesson.php", {
                request_contact_name: $("#request_contact_name").val(),
                request_contact_email: $("#request_contact_email").val(),
                request_message: $("#request_message").val()
            });
            return jqxhr.success(function() {
                $lessonRequest_form.fadeOut(function() {
                    $lessonRequest_form.html("<p><strong class='success'>Молбата е получена!</strong> Когато урокът е готов, ще се свържем с теб :)</p>").hide().fadeIn(600);
                });
            }), !1;
        }
        return !1;
    }), $("#submit_lessonRequestForm").on("click", function() {
        return $lessonRequest_form.submit(), !1;
    });
    var $feedback_form = $("#feedback_form");
    $("#fire_feedbackForm").on("click", function() {
        $feedback_form.is(":visible") ? $feedback_form.slideUp() : $feedback_form.slideDown();
    }), $.expr[":"].textEquals = $.expr.createPseudo(function(arg) {
        return function(elem) {
            return $(elem).text().match("^" + arg + "$");
        };
    });
    var $post = $("#post_mainContent");
    if ($post.size() > 0) {
        var $postHeadings = $post.find("h2");
        if ($postHeadings.size() > 0) {
            var autoContent_string = "<p class='autoGeneratedContent_heading'>Съдържание на урока:</p><ol id='pageAutoContent' class='pageAutoContent'>";
            $postHeadings.each(function(index, el) {
                autoContent_string += "<li>" + $(el).text() + "</li>";
            }), autoContent_string += "</ol>", $post.find("p:first").after(autoContent_string), 
            $("#pageAutoContent").on("click", "li", function() {
                var text_value = $.trim($(this).text()), $current_h2 = $("h2:contains(" + text_value + ")");
                $("html, body").animate({
                    scrollTop: $current_h2.offset().top - $("#masthead").height() - 10
                }, 1e3, function() {
                    $current_h2.addClass("highlight"), $current_h2.animate({
                        opacity: "0.8",
                        "background-color": "red"
                    }, 300, function() {
                        $current_h2.animate({
                            opacity: "1"
                        }, 300), $current_h2.removeClass("highlight");
                    });
                });
            });
        }
    }
    var allPanels = $("#questions_accordion > dd").hide();
    $("#questions_accordion > dt > a").click(function() {
        var $answer = $(this).parent().next();
        $answer.is(":visible") ? $answer.slideUp() : (allPanels.slideUp(), $answer.slideDown());
    }), $.fn.moveTo = function(selector) {
        return this.each(function() {
            var cl = $(this).clone();
            $(cl).prependTo(selector), $(this).remove();
        });
    }, $(window).on("resize", function() {
        if ($(this).width() < 800) {
            $mainMenuItems = $("#menu-default-menu > li").not(".menu-item-has-children"), $mainCategoriesItems = $("#categories-2 ul li");
            var mobile_nav_string = '<nav id="mobile_menu"><ul>';
            $mainMenuItems.each(function(index, el) {
                mobile_nav_string += "<li>" + $(el).html() + "</li>";
            }), mobile_nav_string += '<li><a id="fire_mobile_categories_sub" href="javascript:;">Уроци по категории</a><ul id="mobile_categories_submenu">', 
            $mainCategoriesItems.each(function(index, el) {
                mobile_nav_string += "<li>" + $(el).html() + "</li>";
            }), mobile_nav_string += "</ul></li>", mobile_nav_string += '<li><form role="search" method="get" class="searchform" action="http://easierenglish.bg/"><input type="text" value="" name="s" id="s" placeholder="Потърси урок..."></form></li>', 
            mobile_nav_string += "</ul></nav>", $("body").append(mobile_nav_string), $("#mobile_menu").mmenu(), 
            $("#masthead").moveTo(".mm-page"), $("#masthead").append('<a id="fire_mobileMenu" class="mobile_menu_button" href="javascript:;"><div class="mobile_menu_icon"></div></a>'), 
            $("#fire_mobileMenu").on("click", function() {
                $("#mobile_menu").trigger("open");
            }), $("#fire_mobile_categories_sub").on("click", function() {
                $("#mobile_categories_submenu").trigger("open");
            }), $(window).off("resize");
        }
    }), $(window).width() < 800 && $(window).resize(), /Opera/.test(navigator.userAgent) && $("body").css("font-family", "Arial, sans-serif"), 
    $("[data-say]").on("click", function() {
        $(this).addClass("progress"), $.say($(this).text());
    });
});